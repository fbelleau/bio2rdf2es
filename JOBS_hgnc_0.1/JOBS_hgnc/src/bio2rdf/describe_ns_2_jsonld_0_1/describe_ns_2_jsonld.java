// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package bio2rdf.describe_ns_2_jsonld_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.BioUtil;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.MD5;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: describe_ns_2_jsonld Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.0.20141024_1545
 * @status 
 */
public class describe_ns_2_jsonld implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (type != null) {

				this.setProperty("type", type.toString());

			}

			if (limit != null) {

				this.setProperty("limit", limit.toString());

			}

			if (namespace != null) {

				this.setProperty("namespace", namespace.toString());

			}

			if (debug != null) {

				this.setProperty("debug", debug.toString());

			}

			if (hostES != null) {

				this.setProperty("hostES", hostES.toString());

			}

			if (hostES1 != null) {

				this.setProperty("hostES1", hostES1.toString());

			}

			if (hostES2 != null) {

				this.setProperty("hostES2", hostES2.toString());

			}

			if (hostSparql != null) {

				this.setProperty("hostSparql", hostSparql.toString());

			}

			if (index != null) {

				this.setProperty("index", index.toString());

			}

		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String limit;

		public String getLimit() {
			return this.limit;
		}

		public String namespace;

		public String getNamespace() {
			return this.namespace;
		}

		public Boolean debug;

		public Boolean getDebug() {
			return this.debug;
		}

		public String hostES;

		public String getHostES() {
			return this.hostES;
		}

		public String hostES1;

		public String getHostES1() {
			return this.hostES1;
		}

		public String hostES2;

		public String getHostES2() {
			return this.hostES2;
		}

		public String hostSparql;

		public String getHostSparql() {
			return this.hostSparql;
		}

		public String index;

		public String getIndex() {
			return this.index;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "describe_ns_2_jsonld";
	private final String projectName = "BIO2RDF";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					describe_ns_2_jsonld.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(describe_ns_2_jsonld.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tSparqlSelectRequest_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSampleRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplace_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSparqlConstructRequest_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplace_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplicate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFlowToIterate_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tRunJob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tReplace_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFlowToIterate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tREST_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSparqlSelectRequest_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSparqlSelectRequest_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class out7Struct implements
			routines.system.IPersistableRow<out7Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out2Struct implements
			routines.system.IPersistableRow<out2Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String rdf;

		public String getRdf() {
			return this.rdf;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.rdf = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.rdf, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("rdf=" + rdf);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out5Struct implements
			routines.system.IPersistableRow<out5Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String rdf;

		public String getRdf() {
			return this.rdf;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.rdf = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.rdf, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("rdf=" + rdf);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String rdf;

		public String getRdf() {
			return this.rdf;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.rdf = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.rdf, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("rdf=" + rdf);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String rdf;

		public String getRdf() {
			return this.rdf;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.rdf = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.rdf, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("rdf=" + rdf);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String rdf;

		public String getRdf() {
			return this.rdf;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.rdf = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.rdf, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("rdf=" + rdf);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String rdf;

		public String getRdf() {
			return this.rdf;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.rdf = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.rdf, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("rdf=" + rdf);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String uri;

		public String getUri() {
			return this.uri;
		}

		public String SparqlResults;

		public String getSparqlResults() {
			return this.SparqlResults;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.uri = readString(dis);

					this.SparqlResults = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.uri, dos);

				// String

				writeString(this.SparqlResults, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("uri=" + uri);
			sb.append(",SparqlResults=" + SparqlResults);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String uri;

		public String getUri() {
			return this.uri;
		}

		public String SparqlResults;

		public String getSparqlResults() {
			return this.SparqlResults;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.uri = readString(dis);

					this.SparqlResults = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.uri, dos);

				// String

				writeString(this.SparqlResults, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("uri=" + uri);
			sb.append(",SparqlResults=" + SparqlResults);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String uri;

		public String getUri() {
			return this.uri;
		}

		public String SparqlResults;

		public String getSparqlResults() {
			return this.SparqlResults;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.uri = readString(dis);

					this.SparqlResults = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.uri, dos);

				// String

				writeString(this.SparqlResults, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("uri=" + uri);
			sb.append(",SparqlResults=" + SparqlResults);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String uri;

		public String getUri() {
			return this.uri;
		}

		public String SparqlResults;

		public String getSparqlResults() {
			return this.SparqlResults;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.uri = readString(dis);

					this.SparqlResults = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.uri, dos);

				// String

				writeString(this.SparqlResults, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("uri=" + uri);
			sb.append(",SparqlResults=" + SparqlResults);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out8Struct implements
			routines.system.IPersistableRow<out8Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out3Struct implements
			routines.system.IPersistableRow<out3Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String id;

		public String getId() {
			return this.id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out4Struct implements
			routines.system.IPersistableRow<out4Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String uri;

		public String getUri() {
			return this.uri;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.uri = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.uri, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("uri=" + uri);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out6Struct implements
			routines.system.IPersistableRow<out6Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String uri;

		public String getUri() {
			return this.uri;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.uri = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.uri, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("uri=" + uri);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String uri;

		public String getUri() {
			return this.uri;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.uri = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.uri, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("uri=" + uri);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String uri;

		public String getUri() {
			return this.uri;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.uri = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.uri, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("uri=" + uri);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld = new byte[0];
		static byte[] commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[0];

		public String uri;

		public String getUri() {
			return this.uri;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_describe_ns_2_jsonld.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_describe_ns_2_jsonld.length == 0) {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_describe_ns_2_jsonld = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_describe_ns_2_jsonld, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_describe_ns_2_jsonld) {

				try {

					int length = 0;

					this.uri = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.uri, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("uri=" + uri);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tSparqlSelectRequest_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSparqlSelectRequest_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row1Struct row9 = row1;
				row1Struct row2 = row1;
				out3Struct out3 = new out3Struct();
				row17Struct row17 = new row17Struct();
				row17Struct row14 = row17;
				out8Struct out8 = new out8Struct();
				out4Struct out4 = new out4Struct();
				row3Struct row3 = new row3Struct();
				row3Struct row13 = row3;
				row12Struct row12 = new row12Struct();
				row6Struct row6 = new row6Struct();
				out1Struct out1 = new out1Struct();
				row5Struct row5 = new row5Struct();
				row5Struct row4 = row5;
				row7Struct row7 = new row7Struct();
				out2Struct out2 = new out2Struct();
				out5Struct out5 = new out5Struct();
				row10Struct row10 = new row10Struct();
				row10Struct row15 = row10;
				out7Struct out7 = new out7Struct();
				out6Struct out6 = new out6Struct();

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				int tos_count_tLogRow_3 = 0;

				// /////////////////////

				class Util_tLogRow_3 {

					String[] des_top = { ".", "-" };

					String[] des_data = { "-", "+" };

					String[] des_frame = { "|" };

					public void printLine(StringBuilder sb, int titleWidth,
							int dataWidth) {

						sb.append("+");
						for (int i = 0; i < titleWidth + 2; i++)
							sb.append("-");
						sb.append("+");
						for (int i = 0; i < dataWidth + 2; i++)
							sb.append("-");
						sb.append("+" + "\n");
					}

					public String print(String[] row, int nbLine) {

						StringBuilder sb = new StringBuilder();

						String title = "#" + nbLine + ". " + "tLogRow_3";

						// step 1: get the max length of all the row[] member;
						int dataWidth = 5; // the length of the string "value"
						for (int i = 0; i < row.length; i++) {
							if (row[i] == null && 4 > dataWidth) {
								dataWidth = 4;
							} else if (row[i] != null
									&& row[i].length() > dataWidth)
								dataWidth = row[i].length();
						}

						int titleWidth = 3;

						int totalWidth = dataWidth + titleWidth + 5;

						// step 2: print the header with line number
						sb.append(".");
						for (int i = 0; i < totalWidth; i++)
							sb.append("-");
						sb.append("." + "\n" + "|");

						int emptyCenterWidth = (totalWidth - title.length()) / 2;
						for (int i = 0; i < emptyCenterWidth; i++)
							sb.append(" ");
						sb.append(title);
						for (int i = 0; i < totalWidth - emptyCenterWidth
								- title.length(); i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// step 3: print "key" and "value"
						printLine(sb, titleWidth, dataWidth);

						sb.append("|" + " key");
						for (int i = 0; i < titleWidth - 2; i++)
							sb.append(" ");
						sb.append("|" + " value");
						for (int i = 0; i < dataWidth - 4; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						printLine(sb, titleWidth, dataWidth);

						// step 4: print dataset

						// for(int i=0; i<row.length; i++){
						sb.append("| " + "id");
						for (int i = 0; i < titleWidth - "id".length() + 1; i++)
							sb.append(" ");
						sb.append("| " + row[0]);
						for (int i = 0; row[0] == null && i < dataWidth - 3
								|| row[0] != null
								&& i < dataWidth - row[0].length() + 1; i++)
							sb.append(" ");
						sb.append("|" + "\n");

						// }

						// step 5: print a line gap
						printLine(sb, titleWidth, dataWidth);
						return sb.toString();

					}

				}

				Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();

				java.io.PrintStream consoleOut_tLogRow_3 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_3 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
				}

				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
				// /////////////////////

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				int tos_count_tMap_5 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out8Struct out8_tmp = new out8Struct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tLogRow_9 begin ] start
				 */

				ok_Hash.put("tLogRow_9", false);
				start_Hash.put("tLogRow_9", System.currentTimeMillis());

				currentComponent = "tLogRow_9";

				int tos_count_tLogRow_9 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_9 = "|";
				java.io.PrintStream consoleOut_tLogRow_9 = null;

				StringBuilder strBuffer_tLogRow_9 = null;
				int nb_line_tLogRow_9 = 0;
				// /////////////////////

				/**
				 * [tLogRow_9 begin ] stop
				 */

				/**
				 * [tReplace_4 begin ] start
				 */

				ok_Hash.put("tReplace_4", false);
				start_Hash.put("tReplace_4", System.currentTimeMillis());

				currentComponent = "tReplace_4";

				int tos_count_tReplace_4 = 0;

				int nb_line_tReplace_4 = 0;

				/**
				 * [tReplace_4 begin ] stop
				 */

				/**
				 * [tFlowToIterate_2 begin ] start
				 */

				int NB_ITERATE_tRunJob_1 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_2", false);
				start_Hash.put("tFlowToIterate_2", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_2";

				int tos_count_tFlowToIterate_2 = 0;

				int nb_line_tFlowToIterate_2 = 0;
				int counter_tFlowToIterate_2 = 0;

				/**
				 * [tFlowToIterate_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tReplicate_1 begin ] start
				 */

				ok_Hash.put("tReplicate_1", false);
				start_Hash.put("tReplicate_1", System.currentTimeMillis());

				currentComponent = "tReplicate_1";

				int tos_count_tReplicate_1 = 0;

				/**
				 * [tReplicate_1 begin ] stop
				 */

				/**
				 * [tReplace_2 begin ] start
				 */

				ok_Hash.put("tReplace_2", false);
				start_Hash.put("tReplace_2", System.currentTimeMillis());

				currentComponent = "tReplace_2";

				int tos_count_tReplace_2 = 0;

				int nb_line_tReplace_2 = 0;

				/**
				 * [tReplace_2 begin ] stop
				 */

				/**
				 * [tLogRow_8 begin ] start
				 */

				ok_Hash.put("tLogRow_8", false);
				start_Hash.put("tLogRow_8", System.currentTimeMillis());

				currentComponent = "tLogRow_8";

				int tos_count_tLogRow_8 = 0;

				/**
				 * [tLogRow_8 begin ] stop
				 */

				/**
				 * [tSparqlConstructRequest_1 begin ] start
				 */

				ok_Hash.put("tSparqlConstructRequest_1", false);
				start_Hash.put("tSparqlConstructRequest_1",
						System.currentTimeMillis());

				currentComponent = "tSparqlConstructRequest_1";

				int tos_count_tSparqlConstructRequest_1 = 0;

				/**
				 * [tSparqlConstructRequest_1 begin ] stop
				 */

				/**
				 * [tLogRow_6 begin ] start
				 */

				ok_Hash.put("tLogRow_6", false);
				start_Hash.put("tLogRow_6", System.currentTimeMillis());

				currentComponent = "tLogRow_6";

				int tos_count_tLogRow_6 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_6 = "|";
				java.io.PrintStream consoleOut_tLogRow_6 = null;

				StringBuilder strBuffer_tLogRow_6 = null;
				int nb_line_tLogRow_6 = 0;
				// /////////////////////

				/**
				 * [tLogRow_6 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out3Struct out3_tmp = new out3Struct();
				out4Struct out4_tmp = new out4Struct();
				out6Struct out6_tmp = new out6Struct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tSampleRow_1 begin ] start
				 */

				ok_Hash.put("tSampleRow_1", false);
				start_Hash.put("tSampleRow_1", System.currentTimeMillis());

				currentComponent = "tSampleRow_1";

				int tos_count_tSampleRow_1 = 0;

				/**
				 * [tSampleRow_1 begin ] stop
				 */

				/**
				 * [tSparqlSelectRequest_1 begin ] start
				 */

				ok_Hash.put("tSparqlSelectRequest_1", false);
				start_Hash.put("tSparqlSelectRequest_1",
						System.currentTimeMillis());

				currentComponent = "tSparqlSelectRequest_1";

				int tos_count_tSparqlSelectRequest_1 = 0;

				String URL_string_tSparqlSelectRequest_1;

				URL_string_tSparqlSelectRequest_1 = "http://bio2rdf.org/sparql"
						+ "?default-graph-uri=&query="
						+ java.net.URLEncoder.encode(
								"select distinct ?s  where {   ?s a ?t .    filter(?t = <"
										+ context.type + ">) . } limit "
										+ context.limit, "UTF-8")
						+ "&format=application%2Fsparql-results%2Bjson&timeout=0&debug=on";

				org.json.JSONArray jsonArray_tSparqlSelectRequest_1 = new org.json.JSONArray();

				org.json.JSONArray jsonKeysArray_tSparqlSelectRequest_1;

				java.util.ArrayList<String> queryKeys_tSparqlSelectRequest_1 = new java.util.ArrayList<String>();
				// ArrayList that will contain the key value of the query sorted
				// correctly

				org.json.JSONObject jsonObj_tSparqlSelectRequest_1;

				java.util.Iterator<String> queryKeysIterator_tSparqlSelectRequest_1;

				java.net.URL url_tSparqlSelectRequest_1 = new java.net.URL(
						URL_string_tSparqlSelectRequest_1);

				java.net.HttpURLConnection urlConn_tSparqlSelectRequest_1 = (java.net.HttpURLConnection) url_tSparqlSelectRequest_1
						.openConnection();
				urlConn_tSparqlSelectRequest_1.setRequestMethod("GET");
				urlConn_tSparqlSelectRequest_1.setDoOutput(true);
				urlConn_tSparqlSelectRequest_1.setDoInput(true);
				urlConn_tSparqlSelectRequest_1.setUseCaches(false);

				try {
					urlConn_tSparqlSelectRequest_1.connect();

					byte[] buffer_tSparqlSelectRequest_1 = new byte[1024];
					int bos_buffer_tSparqlSelectRequest_1 = 0;

					StringBuilder sb_tSparqlSelectRequest_1 = new StringBuilder();

					if (java.net.HttpURLConnection.HTTP_OK == (urlConn_tSparqlSelectRequest_1
							.getResponseCode())) {
						java.io.InputStream bis_tSparqlSelectRequest_1 = new java.io.BufferedInputStream(
								urlConn_tSparqlSelectRequest_1.getInputStream());

						while ((bos_buffer_tSparqlSelectRequest_1 = bis_tSparqlSelectRequest_1
								.read(buffer_tSparqlSelectRequest_1)) != -1) {
							// Then the table of bytes and its size are used to
							// generate a string
							// which is added to a string builder that will
							// contain the whole response
							sb_tSparqlSelectRequest_1.append(new String(
									buffer_tSparqlSelectRequest_1, 0,
									bos_buffer_tSparqlSelectRequest_1));
						}
						bis_tSparqlSelectRequest_1.close();

					} else {
						System.err.println(urlConn_tSparqlSelectRequest_1
								.getResponseCode()
								+ " "
								+ urlConn_tSparqlSelectRequest_1
										.getResponseMessage());
					}

					urlConn_tSparqlSelectRequest_1.disconnect();

					jsonObj_tSparqlSelectRequest_1 = new org.json.JSONObject(
							sb_tSparqlSelectRequest_1.toString());

					jsonKeysArray_tSparqlSelectRequest_1 = jsonObj_tSparqlSelectRequest_1
							.getJSONObject("head").getJSONArray("vars");
					for (int k_tSparqlSelectRequest_1 = 0; k_tSparqlSelectRequest_1 < jsonKeysArray_tSparqlSelectRequest_1
							.length(); k_tSparqlSelectRequest_1++) {
						queryKeys_tSparqlSelectRequest_1
								.add(jsonKeysArray_tSparqlSelectRequest_1
										.getString(k_tSparqlSelectRequest_1));
					}

					jsonArray_tSparqlSelectRequest_1 = jsonObj_tSparqlSelectRequest_1
							.getJSONObject("results").getJSONArray("bindings");

				} catch (Exception e) {
					System.err.println("UnknownHostException");
				}

				if (jsonArray_tSparqlSelectRequest_1.length() == 0) {
					globalMap.put("tSparqlSelectRequest_1_HAS_RESULTS", false);
				} else {
					globalMap.put("tSparqlSelectRequest_1_HAS_RESULTS", true);
				}

				int i_tSparqlSelectRequest_1;
				int nb_line_tSparqlSelectRequest_1 = 0;

				for (i_tSparqlSelectRequest_1 = 0; i_tSparqlSelectRequest_1 < jsonArray_tSparqlSelectRequest_1
						.length(); i_tSparqlSelectRequest_1++) {

					/**
					 * [tSparqlSelectRequest_1 begin ] stop
					 */

					/**
					 * [tSparqlSelectRequest_1 main ] start
					 */

					currentComponent = "tSparqlSelectRequest_1";

					queryKeysIterator_tSparqlSelectRequest_1 = queryKeys_tSparqlSelectRequest_1
							.iterator();

					if (queryKeysIterator_tSparqlSelectRequest_1.hasNext()) {
						try {
							row1.uri = jsonArray_tSparqlSelectRequest_1
									.getJSONObject(i_tSparqlSelectRequest_1)
									.getJSONObject(
											queryKeysIterator_tSparqlSelectRequest_1
													.next()).getString("value");
						} catch (org.json.JSONException e_tSparqlSelectRequest_1) {
							row1.uri = "";
						}
					}

					tos_count_tSparqlSelectRequest_1++;

					/**
					 * [tSparqlSelectRequest_1 main ] stop
					 */

					/**
					 * [tSampleRow_1 main ] start
					 */

					currentComponent = "tSampleRow_1";

					row9 = row1;

					tos_count_tSampleRow_1++;

					/**
					 * [tSampleRow_1 main ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					row2 = row9;

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tMap_3 main ] start
					 */

					currentComponent = "tMap_3";

					boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_3 = false;
					boolean mainRowRejected_tMap_3 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
						// ###############################
						// # Output tables

						out3 = null;
						out4 = null;
						out6 = null;

						// # Output table : 'out3'
						out3_tmp.id = row2.uri;
						out3 = out3_tmp;

						// # Output table : 'out4'
						out4_tmp.uri = row2.uri;
						out4 = out4_tmp;

						// # Output table : 'out6'
						// # Filter conditions
						if (

						context.debug

						) {
							out6_tmp.uri = row2.uri;
							out6 = out6_tmp;
						} // closing filter/reject
							// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_3 = false;

					tos_count_tMap_3++;

					/**
					 * [tMap_3 main ] stop
					 */
					// Start of branch "out3"
					if (out3 != null) {

						/**
						 * [tReplace_4 main ] start
						 */

						currentComponent = "tReplace_4";

						String searchStr_tReplace_4_1 = "http://bio2rdf.org/"
								+ context.namespace + ":" + "";
						out3.id = StringUtils.replaceAllStrictly(out3.id,
								searchStr_tReplace_4_1, "" + "", false, false);
						String searchStr_tReplace_4_2 = "http://bio2rdf.org/"
								+ context.namespace + "_resource:" + "";
						out3.id = StringUtils.replaceAllStrictly(out3.id,
								searchStr_tReplace_4_2, "" + "", false, false);
						String searchStr_tReplace_4_3 = "http://bio2rdf.org/"
								+ context.namespace + "_vocabulary:" + "";
						out3.id = StringUtils.replaceAllStrictly(out3.id,
								searchStr_tReplace_4_3, "" + "", false, false);
						String searchStr_tReplace_4_4 = "http://bio2rdf.org/hgnc.symbol:"
								+ "";
						out3.id = StringUtils.replaceAllStrictly(out3.id,
								searchStr_tReplace_4_4, "" + "", false, false);
						String searchStr_tReplace_4_5 = "http://bio2rdf.org/uspto:"
								+ "";
						out3.id = StringUtils.replaceAllStrictly(out3.id,
								searchStr_tReplace_4_5, "" + "", false, false);
						String searchStr_tReplace_4_6 = "http://bio2rdf.org/hgnc.symbol:"
								+ "";
						out3.id = StringUtils.replaceAllStrictly(out3.id,
								searchStr_tReplace_4_6, "" + "", false, false);
						String searchStr_tReplace_4_7 = "http://bio2rdf.org/kegg:"
								+ "";
						out3.id = StringUtils.replaceAllStrictly(out3.id,
								searchStr_tReplace_4_7, "kegg_" + "", false,
								false);
						String searchStr_tReplace_4_8 = "http://bio2rdf.org/reactome:"
								+ "";
						out3.id = StringUtils.replaceAllStrictly(out3.id,
								searchStr_tReplace_4_8, "reactome_" + "",
								false, false);
						String searchStr_tReplace_4_9 = "http://bio2rdf.org/kegg_resource:"
								+ "";
						out3.id = StringUtils.replaceAllStrictly(out3.id,
								searchStr_tReplace_4_9, "" + "", false, false);
						String searchStr_tReplace_4_10 = "http://bio2rdf.org/uniprot:"
								+ "";
						out3.id = StringUtils.replaceAllStrictly(out3.id,
								searchStr_tReplace_4_10, "goa_" + "", false,
								false);
						row17.id = out3.id;

						nb_line_tReplace_4++;

						tos_count_tReplace_4++;

						/**
						 * [tReplace_4 main ] stop
						 */

						/**
						 * [tLogRow_9 main ] start
						 */

						currentComponent = "tLogRow_9";

						// /////////////////////

						strBuffer_tLogRow_9 = new StringBuilder();

						if (row17.id != null) { //

							strBuffer_tLogRow_9
									.append(String.valueOf(row17.id));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_9 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_9 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_9);
						}

						consoleOut_tLogRow_9.println(strBuffer_tLogRow_9
								.toString());
						consoleOut_tLogRow_9.flush();
						nb_line_tLogRow_9++;
						// ////

						// ////

						// /////////////////////

						row14 = row17;

						tos_count_tLogRow_9++;

						/**
						 * [tLogRow_9 main ] stop
						 */

						/**
						 * [tMap_5 main ] start
						 */

						currentComponent = "tMap_5";

						boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_5 = false;
						boolean mainRowRejected_tMap_5 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
							// ###############################
							// # Output tables

							out8 = null;

							// # Output table : 'out8'
							// # Filter conditions
							if (

							context.debug

							) {
								out8_tmp.id = row14.id;
								out8 = out8_tmp;
							} // closing filter/reject
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_5 = false;

						tos_count_tMap_5++;

						/**
						 * [tMap_5 main ] stop
						 */
						// Start of branch "out8"
						if (out8 != null) {

							/**
							 * [tLogRow_3 main ] start
							 */

							currentComponent = "tLogRow_3";

							// /////////////////////

							strBuffer_tLogRow_3 = new StringBuilder();

							if (out8.id != null) { //

								strBuffer_tLogRow_3.append(String
										.valueOf(out8.id));

							} //

							String[] row_tLogRow_3 = new String[1];

							if (out8.id != null) { //
								row_tLogRow_3[0] = String.valueOf(out8.id);

							} //

							nb_line_tLogRow_3++;
							consoleOut_tLogRow_3.println(util_tLogRow_3.print(
									row_tLogRow_3, nb_line_tLogRow_3));
							consoleOut_tLogRow_3.flush();
							// ////

							// ////

							// /////////////////////

							tos_count_tLogRow_3++;

							/**
							 * [tLogRow_3 main ] stop
							 */

						} // End of branch "out8"

					} // End of branch "out3"

					// Start of branch "out4"
					if (out4 != null) {

						/**
						 * [tSparqlConstructRequest_1 main ] start
						 */

						currentComponent = "tSparqlConstructRequest_1";

						String URL_string_tSparqlConstructRequest_1;

						URL_string_tSparqlConstructRequest_1 = "http://bio2rdf.org/sparql"
								+ "?default-graph-uri=&query="
								+ java.net.URLEncoder.encode(
										"CONSTRUCT {?s ?p ?o .}   WHERE { ?s ?p ?o . filter(?s = <"
												+ row1.uri + ">) . }", "UTF-8")
								+ "&format="
								+ "text%2Fplain"
								+ "&timeout=0&debug=on";

						java.net.URL url_tSparqlConstructRequest_1 = new java.net.URL(
								URL_string_tSparqlConstructRequest_1);

						try {

							java.net.HttpURLConnection urlConn_tSparqlConstructRequest_1 = (java.net.HttpURLConnection) url_tSparqlConstructRequest_1
									.openConnection();
							urlConn_tSparqlConstructRequest_1
									.setRequestMethod("GET");
							urlConn_tSparqlConstructRequest_1.setDoOutput(true);
							urlConn_tSparqlConstructRequest_1.setDoInput(true);
							urlConn_tSparqlConstructRequest_1
									.setUseCaches(false);

							urlConn_tSparqlConstructRequest_1.connect();

							byte[] buffer_tSparqlConstructRequest_1 = new byte[1024];
							int bos_buffer_tSparqlConstructRequest_1 = 0;

							StringBuilder sb_tSparqlConstructRequest_1 = new StringBuilder();

							if (java.net.HttpURLConnection.HTTP_OK == (urlConn_tSparqlConstructRequest_1
									.getResponseCode())) {
								java.io.InputStream bis_tSparqlConstructRequest_1 = new java.io.BufferedInputStream(
										urlConn_tSparqlConstructRequest_1
												.getInputStream());

								while ((bos_buffer_tSparqlConstructRequest_1 = bis_tSparqlConstructRequest_1
										.read(buffer_tSparqlConstructRequest_1)) != -1) {

									sb_tSparqlConstructRequest_1
											.append(new String(
													buffer_tSparqlConstructRequest_1,
													0,
													bos_buffer_tSparqlConstructRequest_1));

								}
								bis_tSparqlConstructRequest_1.close();

							} else {
								System.err
										.println(urlConn_tSparqlConstructRequest_1
												.getResponseCode()
												+ " "
												+ urlConn_tSparqlConstructRequest_1
														.getResponseMessage());
							}

							row3.uri = out4.uri;

							row3.SparqlResults = sb_tSparqlConstructRequest_1
									.toString();

							urlConn_tSparqlConstructRequest_1.disconnect();
						} catch (Exception e) {
							System.err.println("UnknownHostException");
						}

						tos_count_tSparqlConstructRequest_1++;

						/**
						 * [tSparqlConstructRequest_1 main ] stop
						 */

						/**
						 * [tLogRow_8 main ] start
						 */

						currentComponent = "tLogRow_8";

						row13 = row3;

						tos_count_tLogRow_8++;

						/**
						 * [tLogRow_8 main ] stop
						 */

						/**
						 * [tReplace_2 main ] start
						 */

						currentComponent = "tReplace_2";

						String searchStr_tReplace_2_1 = "@en" + "";
						row13.SparqlResults = StringUtils.replaceAllStrictly(
								row13.SparqlResults, searchStr_tReplace_2_1, ""
										+ "", false, false);
						row12.uri = row13.uri;

						row12.SparqlResults = row13.SparqlResults;

						nb_line_tReplace_2++;

						tos_count_tReplace_2++;

						/**
						 * [tReplace_2 main ] stop
						 */

						/**
						 * [tReplicate_1 main ] start
						 */

						currentComponent = "tReplicate_1";

						row6 = new row6Struct();

						row6.uri = row12.uri;
						row6.SparqlResults = row12.SparqlResults;

						tos_count_tReplicate_1++;

						/**
						 * [tReplicate_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							out1 = null;

							// # Output table : 'out1'
							out1_tmp.rdf = row6.SparqlResults;
							out1 = out1_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "out1"
						if (out1 != null) {

							/**
							 * [tFlowToIterate_2 main ] start
							 */

							currentComponent = "tFlowToIterate_2";

							globalMap.put("out1.rdf", out1.rdf);
							nb_line_tFlowToIterate_2++;

							counter_tFlowToIterate_2++;
							globalMap.put("tFlowToIterate_2_CURRENT_ITERATION",
									counter_tFlowToIterate_2);

							tos_count_tFlowToIterate_2++;

							/**
							 * [tFlowToIterate_2 main ] stop
							 */
							NB_ITERATE_tRunJob_1++;

							/**
							 * [tLogRow_2 begin ] start
							 */

							ok_Hash.put("tLogRow_2", false);
							start_Hash.put("tLogRow_2",
									System.currentTimeMillis());

							currentComponent = "tLogRow_2";

							int tos_count_tLogRow_2 = 0;

							// /////////////////////

							final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
							java.io.PrintStream consoleOut_tLogRow_2 = null;

							StringBuilder strBuffer_tLogRow_2 = null;
							int nb_line_tLogRow_2 = 0;
							// /////////////////////

							/**
							 * [tLogRow_2 begin ] stop
							 */

							/**
							 * [tFlowToIterate_1 begin ] start
							 */

							int NB_ITERATE_tREST_1 = 0; // for statistics

							ok_Hash.put("tFlowToIterate_1", false);
							start_Hash.put("tFlowToIterate_1",
									System.currentTimeMillis());

							currentComponent = "tFlowToIterate_1";

							int tos_count_tFlowToIterate_1 = 0;

							int nb_line_tFlowToIterate_1 = 0;
							int counter_tFlowToIterate_1 = 0;

							/**
							 * [tFlowToIterate_1 begin ] stop
							 */

							/**
							 * [tMap_2 begin ] start
							 */

							ok_Hash.put("tMap_2", false);
							start_Hash
									.put("tMap_2", System.currentTimeMillis());

							currentComponent = "tMap_2";

							int tos_count_tMap_2 = 0;

							// ###############################
							// # Lookup's keys initialization
							// ###############################

							// ###############################
							// # Vars initialization
							class Var__tMap_2__Struct {
							}
							Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
							// ###############################

							// ###############################
							// # Outputs initialization
							out2Struct out2_tmp = new out2Struct();
							out5Struct out5_tmp = new out5Struct();
							// ###############################

							/**
							 * [tMap_2 begin ] stop
							 */

							/**
							 * [tReplace_1 begin ] start
							 */

							ok_Hash.put("tReplace_1", false);
							start_Hash.put("tReplace_1",
									System.currentTimeMillis());

							currentComponent = "tReplace_1";

							int tos_count_tReplace_1 = 0;

							int nb_line_tReplace_1 = 0;

							/**
							 * [tReplace_1 begin ] stop
							 */

							/**
							 * [tLogRow_4 begin ] start
							 */

							ok_Hash.put("tLogRow_4", false);
							start_Hash.put("tLogRow_4",
									System.currentTimeMillis());

							currentComponent = "tLogRow_4";

							int tos_count_tLogRow_4 = 0;

							/**
							 * [tLogRow_4 begin ] stop
							 */

							/**
							 * [tRunJob_1 begin ] start
							 */

							ok_Hash.put("tRunJob_1", false);
							start_Hash.put("tRunJob_1",
									System.currentTimeMillis());

							currentComponent = "tRunJob_1";

							int tos_count_tRunJob_1 = 0;

							/**
							 * [tRunJob_1 begin ] stop
							 */

							/**
							 * [tRunJob_1 main ] start
							 */

							currentComponent = "tRunJob_1";

							java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

							paraList_tRunJob_1.add("--father_pid=" + pid);

							paraList_tRunJob_1.add("--root_pid=" + rootPid);

							paraList_tRunJob_1.add("--father_node=tRunJob_1");

							paraList_tRunJob_1.add("--context=Default");

							// for feature:10589

							paraList_tRunJob_1.add("--stat_port=" + portStats);

							if (resuming_logs_dir_path != null) {
								paraList_tRunJob_1
										.add("--resuming_logs_dir_path="
												+ resuming_logs_dir_path);
							}
							String childResumePath_tRunJob_1 = ResumeUtil
									.getChildJobCheckPointPath(resuming_checkpoint_path);
							String tRunJobName_tRunJob_1 = ResumeUtil
									.getRighttRunJob(resuming_checkpoint_path);
							if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
									&& childResumePath_tRunJob_1 != null) {
								paraList_tRunJob_1
										.add("--resuming_checkpoint_path="
												+ ResumeUtil
														.getChildJobCheckPointPath(resuming_checkpoint_path));
							}
							paraList_tRunJob_1
									.add("--parent_part_launcher=JOB:"
											+ jobName + "/NODE:tRunJob_1");

							java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

							Object obj_tRunJob_1 = null;

							obj_tRunJob_1 = out1.rdf;
							paraList_tRunJob_1
									.add("--context_param rdf="
											+ RuntimeUtils
													.tRunJobConvertContext(obj_tRunJob_1));
							parentContextMap_tRunJob_1
									.put("rdf", obj_tRunJob_1);

							bio2rdf.ntriples_2_jsonld_0_1.ntriples_2_jsonld childJob_tRunJob_1 = new bio2rdf.ntriples_2_jsonld_0_1.ntriples_2_jsonld();
							// pass DataSources
							java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
									.get(KEY_DB_DATASOURCES);
							if (null != talendDataSources_tRunJob_1) {
								java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
								for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
										.entrySet()) {
									dataSources_tRunJob_1.put(
											talendDataSourceEntry_tRunJob_1
													.getKey(),
											talendDataSourceEntry_tRunJob_1
													.getValue()
													.getRawDataSource());
								}
								childJob_tRunJob_1
										.setDataSources(dataSources_tRunJob_1);
							}

							childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

							String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
									.runJob((String[]) paraList_tRunJob_1
											.toArray(new String[paraList_tRunJob_1
													.size()]));

							errorCode = childJob_tRunJob_1.getErrorCode();

							if (childJob_tRunJob_1.getErrorCode() == null) {
								globalMap
										.put("tRunJob_1_CHILD_RETURN_CODE",
												childJob_tRunJob_1.getStatus() != null
														&& ("failure")
																.equals(childJob_tRunJob_1
																		.getStatus()) ? 1
														: 0);
							} else {
								globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
										childJob_tRunJob_1.getErrorCode());
							}
							if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
								globalMap.put(
										"tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
										childJob_tRunJob_1
												.getExceptionStackTrace());
							}

							for (String[] item_tRunJob_1 : childReturn_tRunJob_1) {
								if (childJob_tRunJob_1
										.hastBufferOutputComponent() || true) {

									if (0 < item_tRunJob_1.length) {

										row5.rdf = item_tRunJob_1[0];

									} else {
										row5.rdf = null;
									}

								}

								tos_count_tRunJob_1++;

								/**
								 * [tRunJob_1 main ] stop
								 */

								/**
								 * [tLogRow_4 main ] start
								 */

								currentComponent = "tLogRow_4";

								row4 = row5;

								tos_count_tLogRow_4++;

								/**
								 * [tLogRow_4 main ] stop
								 */

								/**
								 * [tReplace_1 main ] start
								 */

								currentComponent = "tReplace_1";

								String searchStr_tReplace_1_1 = "\\/" + "";
								row4.rdf = StringUtils.replaceAllStrictly(
										row4.rdf, searchStr_tReplace_1_1, "/"
												+ "", false, false);
								String searchStr_tReplace_1_2 = "http://www.w3.org/2002/07/owl#"
										+ "";
								row4.rdf = StringUtils.replaceAllStrictly(
										row4.rdf, searchStr_tReplace_1_2, ""
												+ "", false, false);
								String searchStr_tReplace_1_3 = "http://www.w3.org/1999/02/22-rdf-syntax-ns#"
										+ "";
								row4.rdf = StringUtils.replaceAllStrictly(
										row4.rdf, searchStr_tReplace_1_3, ""
												+ "", false, false);
								String searchStr_tReplace_1_4 = "http://bio2rdf.org/"
										+ "";
								row4.rdf = StringUtils.replaceAllStrictly(
										row4.rdf, searchStr_tReplace_1_4, ""
												+ "", false, false);
								String searchStr_tReplace_1_5 = "http://www.w3.org/2000/01/rdf-schema#"
										+ "";
								row4.rdf = StringUtils.replaceAllStrictly(
										row4.rdf, searchStr_tReplace_1_5, ""
												+ "", false, false);
								String searchStr_tReplace_1_6 = "http://purl.org/dc/terms/"
										+ "";
								row4.rdf = StringUtils.replaceAllStrictly(
										row4.rdf, searchStr_tReplace_1_6, ""
												+ "", false, false);
								String searchStr_tReplace_1_7 = "bio2rdf_vocabulary:"
										+ "";
								row4.rdf = StringUtils.replaceAllStrictly(
										row4.rdf, searchStr_tReplace_1_7, ""
												+ "", false, false);
								String searchStr_tReplace_1_8 = context.namespace
										+ "_vocabulary:" + "";
								row4.rdf = StringUtils.replaceAllStrictly(
										row4.rdf, searchStr_tReplace_1_8, ""
												+ "", false, false);
								String searchStr_tReplace_1_9 = "x-identifiers.org"
										+ "";
								row4.rdf = StringUtils.replaceAllStrictly(
										row4.rdf, searchStr_tReplace_1_9,
										"x-identifiers" + "", false, false);
								String searchStr_tReplace_1_10 = "http://identifiers.org/"
										+ "";
								row4.rdf = StringUtils.replaceAllStrictly(
										row4.rdf, searchStr_tReplace_1_10,
										"identifiers:" + "", false, false);
								String searchStr_tReplace_1_11 = "chromosome:"
										+ "";
								row4.rdf = StringUtils.replaceAllStrictly(
										row4.rdf, searchStr_tReplace_1_11,
										"chromosome-" + "", false, false);
								String searchStr_tReplace_1_12 = "genotype/"
										+ "";
								row4.rdf = StringUtils.replaceAllStrictly(
										row4.rdf, searchStr_tReplace_1_12,
										"genotype-" + "", false, false);
								String searchStr_tReplace_1_13 = "phenotype:"
										+ "";
								row4.rdf = StringUtils.replaceAllStrictly(
										row4.rdf, searchStr_tReplace_1_13,
										"phenotype-" + "", false, false);
								row7.rdf = row4.rdf;

								nb_line_tReplace_1++;

								tos_count_tReplace_1++;

								/**
								 * [tReplace_1 main ] stop
								 */

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
									// ###############################
									// # Output tables

									out2 = null;
									out5 = null;

									// # Output table : 'out2'
									// # Filter conditions
									if (

									context.debug

									) {
										out2_tmp.rdf = row7.rdf;
										out2 = out2_tmp;
									} // closing filter/reject

									// # Output table : 'out5'
									out5_tmp.rdf = row7.rdf;
									out5 = out5_tmp;
									// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */
								// Start of branch "out2"
								if (out2 != null) {

									/**
									 * [tLogRow_2 main ] start
									 */

									currentComponent = "tLogRow_2";

									// /////////////////////

									strBuffer_tLogRow_2 = new StringBuilder();

									if (out2.rdf != null) { //

										strBuffer_tLogRow_2.append(String
												.valueOf(out2.rdf));

									} //

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
												.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_2 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(
														System.out));
										globalMap.put("tLogRow_CONSOLE",
												consoleOut_tLogRow_2);
									}

									consoleOut_tLogRow_2
											.println(strBuffer_tLogRow_2
													.toString());
									consoleOut_tLogRow_2.flush();
									nb_line_tLogRow_2++;
									// ////

									// ////

									// /////////////////////

									tos_count_tLogRow_2++;

									/**
									 * [tLogRow_2 main ] stop
									 */

								} // End of branch "out2"

								// Start of branch "out5"
								if (out5 != null) {

									/**
									 * [tFlowToIterate_1 main ] start
									 */

									currentComponent = "tFlowToIterate_1";

									globalMap.put("out5.rdf", out5.rdf);
									nb_line_tFlowToIterate_1++;

									counter_tFlowToIterate_1++;
									globalMap
											.put("tFlowToIterate_1_CURRENT_ITERATION",
													counter_tFlowToIterate_1);

									tos_count_tFlowToIterate_1++;

									/**
									 * [tFlowToIterate_1 main ] stop
									 */
									NB_ITERATE_tREST_1++;

									/**
									 * [tLogRow_5 begin ] start
									 */

									ok_Hash.put("tLogRow_5", false);
									start_Hash.put("tLogRow_5",
											System.currentTimeMillis());

									currentComponent = "tLogRow_5";

									int tos_count_tLogRow_5 = 0;

									// /////////////////////

									final String OUTPUT_FIELD_SEPARATOR_tLogRow_5 = "|";
									java.io.PrintStream consoleOut_tLogRow_5 = null;

									StringBuilder strBuffer_tLogRow_5 = null;
									int nb_line_tLogRow_5 = 0;
									// /////////////////////

									/**
									 * [tLogRow_5 begin ] stop
									 */

									/**
									 * [tMap_4 begin ] start
									 */

									ok_Hash.put("tMap_4", false);
									start_Hash.put("tMap_4",
											System.currentTimeMillis());

									currentComponent = "tMap_4";

									int tos_count_tMap_4 = 0;

									// ###############################
									// # Lookup's keys initialization
									// ###############################

									// ###############################
									// # Vars initialization
									class Var__tMap_4__Struct {
									}
									Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
									// ###############################

									// ###############################
									// # Outputs initialization
									out7Struct out7_tmp = new out7Struct();
									// ###############################

									/**
									 * [tMap_4 begin ] stop
									 */

									/**
									 * [tLogRow_10 begin ] start
									 */

									ok_Hash.put("tLogRow_10", false);
									start_Hash.put("tLogRow_10",
											System.currentTimeMillis());

									currentComponent = "tLogRow_10";

									int tos_count_tLogRow_10 = 0;

									/**
									 * [tLogRow_10 begin ] stop
									 */

									/**
									 * [tREST_1 begin ] start
									 */

									ok_Hash.put("tREST_1", false);
									start_Hash.put("tREST_1",
											System.currentTimeMillis());

									currentComponent = "tREST_1";

									int tos_count_tREST_1 = 0;

									String endpoint_tREST_1 = "http://"
											+ context.hostES + "/"
											+ context.index + "/resource/"
											+ row17.id;

									String trustStoreFile_tREST_1 = System
											.getProperty("javax.net.ssl.trustStore");
									String trustStoreType_tREST_1 = System
											.getProperty("javax.net.ssl.trustStoreType");
									String trustStorePWD_tREST_1 = System
											.getProperty("javax.net.ssl.trustStorePassword");

									String keyStoreFile_tREST_1 = System
											.getProperty("javax.net.ssl.keyStore");
									String keyStoreType_tREST_1 = System
											.getProperty("javax.net.ssl.keyStoreType");
									String keyStorePWD_tREST_1 = System
											.getProperty("javax.net.ssl.keyStorePassword");

									com.sun.jersey.api.client.config.ClientConfig config_tREST_1 = new com.sun.jersey.api.client.config.DefaultClientConfig();
									javax.net.ssl.SSLContext ctx_tREST_1 = javax.net.ssl.SSLContext
											.getInstance("SSL");

									javax.net.ssl.TrustManager[] tms_tREST_1 = null;
									if (trustStoreFile_tREST_1 != null
											&& trustStoreType_tREST_1 != null) {
										char[] password_tREST_1 = null;
										if (trustStorePWD_tREST_1 != null)
											password_tREST_1 = trustStorePWD_tREST_1
													.toCharArray();
										java.security.KeyStore trustStore_tREST_1 = java.security.KeyStore
												.getInstance(trustStoreType_tREST_1);
										trustStore_tREST_1
												.load(new java.io.FileInputStream(
														trustStoreFile_tREST_1),
														password_tREST_1);

										javax.net.ssl.TrustManagerFactory tmf_tREST_1 = javax.net.ssl.TrustManagerFactory
												.getInstance(javax.net.ssl.KeyManagerFactory
														.getDefaultAlgorithm());
										tmf_tREST_1.init(trustStore_tREST_1);
										tms_tREST_1 = tmf_tREST_1
												.getTrustManagers();
									}

									javax.net.ssl.KeyManager[] kms_tREST_1 = null;
									if (keyStoreFile_tREST_1 != null
											&& keyStoreType_tREST_1 != null) {
										char[] password_tREST_1 = null;
										if (keyStorePWD_tREST_1 != null)
											password_tREST_1 = keyStorePWD_tREST_1
													.toCharArray();
										java.security.KeyStore keyStore_tREST_1 = java.security.KeyStore
												.getInstance(keyStoreType_tREST_1);
										keyStore_tREST_1.load(
												new java.io.FileInputStream(
														keyStoreFile_tREST_1),
												password_tREST_1);

										javax.net.ssl.KeyManagerFactory kmf_tREST_1 = javax.net.ssl.KeyManagerFactory
												.getInstance(javax.net.ssl.KeyManagerFactory
														.getDefaultAlgorithm());
										kmf_tREST_1.init(keyStore_tREST_1,
												password_tREST_1);
										kms_tREST_1 = kmf_tREST_1
												.getKeyManagers();
									}

									ctx_tREST_1.init(kms_tREST_1, tms_tREST_1,
											null);
									config_tREST_1
											.getProperties()
											.put(com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
													new com.sun.jersey.client.urlconnection.HTTPSProperties(
															new javax.net.ssl.HostnameVerifier() {

																public boolean verify(
																		String hostName,
																		javax.net.ssl.SSLSession session) {
																	return true;
																}
															}, ctx_tREST_1));

									com.sun.jersey.api.client.Client restClient_tREST_1 = com.sun.jersey.api.client.Client
											.create(config_tREST_1);
									com.sun.jersey.api.client.WebResource restResource_tREST_1;
									if (endpoint_tREST_1 != null
											&& !("").equals(endpoint_tREST_1)) {
										restResource_tREST_1 = restClient_tREST_1
												.resource(endpoint_tREST_1);
									} else {
										throw new IllegalArgumentException(
												"url can't be empty!");
									}

									com.sun.jersey.api.client.ClientResponse errorResponse_tREST_1 = null;
									String restResponse_tREST_1 = "";
									try {

										restResponse_tREST_1 = restResource_tREST_1

										.put(String.class, row7.rdf);

									} catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
										errorResponse_tREST_1 = ue
												.getResponse();
									}

									// for output

									row10 = new row10Struct();
									if (errorResponse_tREST_1 != null) {
										row10.ERROR_CODE = errorResponse_tREST_1
												.getStatus();
									} else {
										row10.Body = restResponse_tREST_1;
									}

									/**
									 * [tREST_1 begin ] stop
									 */

									/**
									 * [tREST_1 main ] start
									 */

									currentComponent = "tREST_1";

									tos_count_tREST_1++;

									/**
									 * [tREST_1 main ] stop
									 */

									/**
									 * [tLogRow_10 main ] start
									 */

									currentComponent = "tLogRow_10";

									row15 = row10;

									tos_count_tLogRow_10++;

									/**
									 * [tLogRow_10 main ] stop
									 */

									/**
									 * [tMap_4 main ] start
									 */

									currentComponent = "tMap_4";

									boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_4 = false;
									boolean mainRowRejected_tMap_4 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
										// ###############################
										// # Output tables

										out7 = null;

										// # Output table : 'out7'
										// # Filter conditions
										if (

										context.debug

										) {
											out7_tmp.Body = row15.Body;
											out7_tmp.ERROR_CODE = row15.ERROR_CODE;
											out7 = out7_tmp;
										} // closing filter/reject
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_4 = false;

									tos_count_tMap_4++;

									/**
									 * [tMap_4 main ] stop
									 */
									// Start of branch "out7"
									if (out7 != null) {

										/**
										 * [tLogRow_5 main ] start
										 */

										currentComponent = "tLogRow_5";

										// /////////////////////

										strBuffer_tLogRow_5 = new StringBuilder();

										if (out7.Body != null) { //

											strBuffer_tLogRow_5.append(String
													.valueOf(out7.Body));

										} //

										strBuffer_tLogRow_5.append("|");

										if (out7.ERROR_CODE != null) { //

											strBuffer_tLogRow_5.append(String
													.valueOf(out7.ERROR_CODE));

										} //

										if (globalMap.get("tLogRow_CONSOLE") != null) {
											consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap
													.get("tLogRow_CONSOLE");
										} else {
											consoleOut_tLogRow_5 = new java.io.PrintStream(
													new java.io.BufferedOutputStream(
															System.out));
											globalMap.put("tLogRow_CONSOLE",
													consoleOut_tLogRow_5);
										}

										consoleOut_tLogRow_5
												.println(strBuffer_tLogRow_5
														.toString());
										consoleOut_tLogRow_5.flush();
										nb_line_tLogRow_5++;
										// ////

										// ////

										// /////////////////////

										tos_count_tLogRow_5++;

										/**
										 * [tLogRow_5 main ] stop
										 */

									} // End of branch "out7"

									/**
									 * [tREST_1 end ] start
									 */

									currentComponent = "tREST_1";

									ok_Hash.put("tREST_1", true);
									end_Hash.put("tREST_1",
											System.currentTimeMillis());

									/**
									 * [tREST_1 end ] stop
									 */

									/**
									 * [tLogRow_10 end ] start
									 */

									currentComponent = "tLogRow_10";

									ok_Hash.put("tLogRow_10", true);
									end_Hash.put("tLogRow_10",
											System.currentTimeMillis());

									/**
									 * [tLogRow_10 end ] stop
									 */

									/**
									 * [tMap_4 end ] start
									 */

									currentComponent = "tMap_4";

									// ###############################
									// # Lookup hashes releasing
									// ###############################

									ok_Hash.put("tMap_4", true);
									end_Hash.put("tMap_4",
											System.currentTimeMillis());

									/**
									 * [tMap_4 end ] stop
									 */

									/**
									 * [tLogRow_5 end ] start
									 */

									currentComponent = "tLogRow_5";

									// ////
									// ////
									globalMap.put("tLogRow_5_NB_LINE",
											nb_line_tLogRow_5);

									// /////////////////////

									ok_Hash.put("tLogRow_5", true);
									end_Hash.put("tLogRow_5",
											System.currentTimeMillis());

									/**
									 * [tLogRow_5 end ] stop
									 */

								} // End of branch "out5"

							} // C_01

							/**
							 * [tRunJob_1 end ] start
							 */

							currentComponent = "tRunJob_1";

							ok_Hash.put("tRunJob_1", true);
							end_Hash.put("tRunJob_1",
									System.currentTimeMillis());

							/**
							 * [tRunJob_1 end ] stop
							 */

							/**
							 * [tLogRow_4 end ] start
							 */

							currentComponent = "tLogRow_4";

							ok_Hash.put("tLogRow_4", true);
							end_Hash.put("tLogRow_4",
									System.currentTimeMillis());

							/**
							 * [tLogRow_4 end ] stop
							 */

							/**
							 * [tReplace_1 end ] start
							 */

							currentComponent = "tReplace_1";

							globalMap.put("tReplace_1_NB_LINE",
									nb_line_tReplace_1);

							ok_Hash.put("tReplace_1", true);
							end_Hash.put("tReplace_1",
									System.currentTimeMillis());

							/**
							 * [tReplace_1 end ] stop
							 */

							/**
							 * [tMap_2 end ] start
							 */

							currentComponent = "tMap_2";

							// ###############################
							// # Lookup hashes releasing
							// ###############################

							ok_Hash.put("tMap_2", true);
							end_Hash.put("tMap_2", System.currentTimeMillis());

							/**
							 * [tMap_2 end ] stop
							 */

							/**
							 * [tLogRow_2 end ] start
							 */

							currentComponent = "tLogRow_2";

							// ////
							// ////
							globalMap.put("tLogRow_2_NB_LINE",
									nb_line_tLogRow_2);

							// /////////////////////

							ok_Hash.put("tLogRow_2", true);
							end_Hash.put("tLogRow_2",
									System.currentTimeMillis());

							/**
							 * [tLogRow_2 end ] stop
							 */

							/**
							 * [tFlowToIterate_1 end ] start
							 */

							currentComponent = "tFlowToIterate_1";

							globalMap.put("tFlowToIterate_1_NB_LINE",
									nb_line_tFlowToIterate_1);

							ok_Hash.put("tFlowToIterate_1", true);
							end_Hash.put("tFlowToIterate_1",
									System.currentTimeMillis());

							/**
							 * [tFlowToIterate_1 end ] stop
							 */

						} // End of branch "out1"

					} // End of branch "out4"

					// Start of branch "out6"
					if (out6 != null) {

						/**
						 * [tLogRow_6 main ] start
						 */

						currentComponent = "tLogRow_6";

						// /////////////////////

						strBuffer_tLogRow_6 = new StringBuilder();

						if (out6.uri != null) { //

							strBuffer_tLogRow_6
									.append(String.valueOf(out6.uri));

						} //

						if (globalMap.get("tLogRow_CONSOLE") != null) {
							consoleOut_tLogRow_6 = (java.io.PrintStream) globalMap
									.get("tLogRow_CONSOLE");
						} else {
							consoleOut_tLogRow_6 = new java.io.PrintStream(
									new java.io.BufferedOutputStream(System.out));
							globalMap.put("tLogRow_CONSOLE",
									consoleOut_tLogRow_6);
						}

						consoleOut_tLogRow_6.println(strBuffer_tLogRow_6
								.toString());
						consoleOut_tLogRow_6.flush();
						nb_line_tLogRow_6++;
						// ////

						// ////

						// /////////////////////

						tos_count_tLogRow_6++;

						/**
						 * [tLogRow_6 main ] stop
						 */

					} // End of branch "out6"

					/**
					 * [tSparqlSelectRequest_1 end ] start
					 */

					currentComponent = "tSparqlSelectRequest_1";

					nb_line_tSparqlSelectRequest_1++;
				}

				globalMap.put("tSparqlSelectRequest_1_NB_LINE",
						nb_line_tSparqlSelectRequest_1);

				ok_Hash.put("tSparqlSelectRequest_1", true);
				end_Hash.put("tSparqlSelectRequest_1",
						System.currentTimeMillis());

				/**
				 * [tSparqlSelectRequest_1 end ] stop
				 */

				/**
				 * [tSampleRow_1 end ] start
				 */

				currentComponent = "tSampleRow_1";

				ok_Hash.put("tSampleRow_1", true);
				end_Hash.put("tSampleRow_1", System.currentTimeMillis());

				/**
				 * [tSampleRow_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tReplace_4 end ] start
				 */

				currentComponent = "tReplace_4";

				globalMap.put("tReplace_4_NB_LINE", nb_line_tReplace_4);

				ok_Hash.put("tReplace_4", true);
				end_Hash.put("tReplace_4", System.currentTimeMillis());

				/**
				 * [tReplace_4 end ] stop
				 */

				/**
				 * [tLogRow_9 end ] start
				 */

				currentComponent = "tLogRow_9";

				// ////
				// ////
				globalMap.put("tLogRow_9_NB_LINE", nb_line_tLogRow_9);

				// /////////////////////

				ok_Hash.put("tLogRow_9", true);
				end_Hash.put("tLogRow_9", System.currentTimeMillis());

				/**
				 * [tLogRow_9 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

				// ////
				// ////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

				// /////////////////////

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

				/**
				 * [tSparqlConstructRequest_1 end ] start
				 */

				currentComponent = "tSparqlConstructRequest_1";

				ok_Hash.put("tSparqlConstructRequest_1", true);
				end_Hash.put("tSparqlConstructRequest_1",
						System.currentTimeMillis());

				/**
				 * [tSparqlConstructRequest_1 end ] stop
				 */

				/**
				 * [tLogRow_8 end ] start
				 */

				currentComponent = "tLogRow_8";

				ok_Hash.put("tLogRow_8", true);
				end_Hash.put("tLogRow_8", System.currentTimeMillis());

				/**
				 * [tLogRow_8 end ] stop
				 */

				/**
				 * [tReplace_2 end ] start
				 */

				currentComponent = "tReplace_2";

				globalMap.put("tReplace_2_NB_LINE", nb_line_tReplace_2);

				ok_Hash.put("tReplace_2", true);
				end_Hash.put("tReplace_2", System.currentTimeMillis());

				/**
				 * [tReplace_2 end ] stop
				 */

				/**
				 * [tReplicate_1 end ] start
				 */

				currentComponent = "tReplicate_1";

				ok_Hash.put("tReplicate_1", true);
				end_Hash.put("tReplicate_1", System.currentTimeMillis());

				/**
				 * [tReplicate_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFlowToIterate_2 end ] start
				 */

				currentComponent = "tFlowToIterate_2";

				globalMap.put("tFlowToIterate_2_NB_LINE",
						nb_line_tFlowToIterate_2);

				ok_Hash.put("tFlowToIterate_2", true);
				end_Hash.put("tFlowToIterate_2", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_2 end ] stop
				 */

				/**
				 * [tLogRow_6 end ] start
				 */

				currentComponent = "tLogRow_6";

				// ////
				// ////
				globalMap.put("tLogRow_6_NB_LINE", nb_line_tLogRow_6);

				// /////////////////////

				ok_Hash.put("tLogRow_6", true);
				end_Hash.put("tLogRow_6", System.currentTimeMillis());

				/**
				 * [tLogRow_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSparqlSelectRequest_1 finally ] start
				 */

				currentComponent = "tSparqlSelectRequest_1";

				/**
				 * [tSparqlSelectRequest_1 finally ] stop
				 */

				/**
				 * [tSampleRow_1 finally ] start
				 */

				currentComponent = "tSampleRow_1";

				/**
				 * [tSampleRow_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tReplace_4 finally ] start
				 */

				currentComponent = "tReplace_4";

				/**
				 * [tReplace_4 finally ] stop
				 */

				/**
				 * [tLogRow_9 finally ] start
				 */

				currentComponent = "tLogRow_9";

				/**
				 * [tLogRow_9 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

				/**
				 * [tSparqlConstructRequest_1 finally ] start
				 */

				currentComponent = "tSparqlConstructRequest_1";

				/**
				 * [tSparqlConstructRequest_1 finally ] stop
				 */

				/**
				 * [tLogRow_8 finally ] start
				 */

				currentComponent = "tLogRow_8";

				/**
				 * [tLogRow_8 finally ] stop
				 */

				/**
				 * [tReplace_2 finally ] start
				 */

				currentComponent = "tReplace_2";

				/**
				 * [tReplace_2 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFlowToIterate_2 finally ] start
				 */

				currentComponent = "tFlowToIterate_2";

				/**
				 * [tFlowToIterate_2 finally ] stop
				 */

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */

				/**
				 * [tLogRow_4 finally ] start
				 */

				currentComponent = "tLogRow_4";

				/**
				 * [tLogRow_4 finally ] stop
				 */

				/**
				 * [tReplace_1 finally ] start
				 */

				currentComponent = "tReplace_1";

				/**
				 * [tReplace_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tREST_1 finally ] start
				 */

				currentComponent = "tREST_1";

				/**
				 * [tREST_1 finally ] stop
				 */

				/**
				 * [tLogRow_10 finally ] start
				 */

				currentComponent = "tLogRow_10";

				/**
				 * [tLogRow_10 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tLogRow_5 finally ] start
				 */

				currentComponent = "tLogRow_5";

				/**
				 * [tLogRow_5 finally ] stop
				 */

				/**
				 * [tLogRow_6 finally ] start
				 */

				currentComponent = "tLogRow_6";

				/**
				 * [tLogRow_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSparqlSelectRequest_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final describe_ns_2_jsonld describe_ns_2_jsonldClass = new describe_ns_2_jsonld();

		int exitCode = describe_ns_2_jsonldClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = describe_ns_2_jsonld.class
					.getClassLoader().getResourceAsStream(
							"bio2rdf/describe_ns_2_jsonld_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.type = (String) context.getProperty("type");
			context.limit = (String) context.getProperty("limit");
			context.namespace = (String) context.getProperty("namespace");
			try {
				context.debug = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("debug"));
			} catch (NumberFormatException e) {
				context.debug = null;
			}
			context.hostES = (String) context.getProperty("hostES");
			context.hostES1 = (String) context.getProperty("hostES1");
			context.hostES2 = (String) context.getProperty("hostES2");
			context.hostSparql = (String) context.getProperty("hostSparql");
			context.index = (String) context.getProperty("index");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("type")) {
				context.type = (String) parentContextMap.get("type");
			}
			if (parentContextMap.containsKey("limit")) {
				context.limit = (String) parentContextMap.get("limit");
			}
			if (parentContextMap.containsKey("namespace")) {
				context.namespace = (String) parentContextMap.get("namespace");
			}
			if (parentContextMap.containsKey("debug")) {
				context.debug = (Boolean) parentContextMap.get("debug");
			}
			if (parentContextMap.containsKey("hostES")) {
				context.hostES = (String) parentContextMap.get("hostES");
			}
			if (parentContextMap.containsKey("hostES1")) {
				context.hostES1 = (String) parentContextMap.get("hostES1");
			}
			if (parentContextMap.containsKey("hostES2")) {
				context.hostES2 = (String) parentContextMap.get("hostES2");
			}
			if (parentContextMap.containsKey("hostSparql")) {
				context.hostSparql = (String) parentContextMap
						.get("hostSparql");
			}
			if (parentContextMap.containsKey("index")) {
				context.index = (String) parentContextMap.get("index");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tSparqlSelectRequest_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tSparqlSelectRequest_1) {
			globalMap.put("tSparqlSelectRequest_1_SUBPROCESS_STATE", -1);

			e_tSparqlSelectRequest_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : describe_ns_2_jsonld");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 160596 characters generated by Talend Open Studio for Data Integration on the
 * October 12, 2016 12:53:27 EDT AM
 ************************************************************************************************/
