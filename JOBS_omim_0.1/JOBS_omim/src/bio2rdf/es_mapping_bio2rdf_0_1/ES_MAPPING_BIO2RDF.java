// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package bio2rdf.es_mapping_bio2rdf_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.BioUtil;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.MD5;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: ES_MAPPING_BIO2RDF Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.0.20141024_1545
 * @status 
 */
public class ES_MAPPING_BIO2RDF implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (index != null) {

				this.setProperty("index", index.toString());

			}

			if (type != null) {

				this.setProperty("type", type.toString());

			}

			if (hostES != null) {

				this.setProperty("hostES", hostES.toString());

			}

			if (hostES1 != null) {

				this.setProperty("hostES1", hostES1.toString());

			}

			if (hostES2 != null) {

				this.setProperty("hostES2", hostES2.toString());

			}

		}

		public String index;

		public String getIndex() {
			return this.index;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String hostES;

		public String getHostES() {
			return this.hostES;
		}

		public String hostES1;

		public String getHostES1() {
			return this.hostES1;
		}

		public String hostES2;

		public String getHostES2() {
			return this.hostES2;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ES_MAPPING_BIO2RDF";
	private final String projectName = "BIO2RDF";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ES_MAPPING_BIO2RDF.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ES_MAPPING_BIO2RDF.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tREST_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tREST_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplace_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractRegexFields_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tNTriplesTemplate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tREST_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tREST_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tREST_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];
		static byte[] commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length == 0) {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tREST_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tREST_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();

				/**
				 * [tLogRow_7 begin ] start
				 */

				ok_Hash.put("tLogRow_7", false);
				start_Hash.put("tLogRow_7", System.currentTimeMillis());

				currentComponent = "tLogRow_7";

				int tos_count_tLogRow_7 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_7 = "|";
				java.io.PrintStream consoleOut_tLogRow_7 = null;

				StringBuilder strBuffer_tLogRow_7 = null;
				int nb_line_tLogRow_7 = 0;
				// /////////////////////

				/**
				 * [tLogRow_7 begin ] stop
				 */

				/**
				 * [tREST_3 begin ] start
				 */

				ok_Hash.put("tREST_3", false);
				start_Hash.put("tREST_3", System.currentTimeMillis());

				currentComponent = "tREST_3";

				int tos_count_tREST_3 = 0;

				String endpoint_tREST_3 = "http://" + context.hostES + "/"
						+ context.index + "/_mappings/" + context.type;

				String trustStoreFile_tREST_3 = System
						.getProperty("javax.net.ssl.trustStore");
				String trustStoreType_tREST_3 = System
						.getProperty("javax.net.ssl.trustStoreType");
				String trustStorePWD_tREST_3 = System
						.getProperty("javax.net.ssl.trustStorePassword");

				String keyStoreFile_tREST_3 = System
						.getProperty("javax.net.ssl.keyStore");
				String keyStoreType_tREST_3 = System
						.getProperty("javax.net.ssl.keyStoreType");
				String keyStorePWD_tREST_3 = System
						.getProperty("javax.net.ssl.keyStorePassword");

				com.sun.jersey.api.client.config.ClientConfig config_tREST_3 = new com.sun.jersey.api.client.config.DefaultClientConfig();
				javax.net.ssl.SSLContext ctx_tREST_3 = javax.net.ssl.SSLContext
						.getInstance("SSL");

				javax.net.ssl.TrustManager[] tms_tREST_3 = null;
				if (trustStoreFile_tREST_3 != null
						&& trustStoreType_tREST_3 != null) {
					char[] password_tREST_3 = null;
					if (trustStorePWD_tREST_3 != null)
						password_tREST_3 = trustStorePWD_tREST_3.toCharArray();
					java.security.KeyStore trustStore_tREST_3 = java.security.KeyStore
							.getInstance(trustStoreType_tREST_3);
					trustStore_tREST_3.load(new java.io.FileInputStream(
							trustStoreFile_tREST_3), password_tREST_3);

					javax.net.ssl.TrustManagerFactory tmf_tREST_3 = javax.net.ssl.TrustManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory
									.getDefaultAlgorithm());
					tmf_tREST_3.init(trustStore_tREST_3);
					tms_tREST_3 = tmf_tREST_3.getTrustManagers();
				}

				javax.net.ssl.KeyManager[] kms_tREST_3 = null;
				if (keyStoreFile_tREST_3 != null
						&& keyStoreType_tREST_3 != null) {
					char[] password_tREST_3 = null;
					if (keyStorePWD_tREST_3 != null)
						password_tREST_3 = keyStorePWD_tREST_3.toCharArray();
					java.security.KeyStore keyStore_tREST_3 = java.security.KeyStore
							.getInstance(keyStoreType_tREST_3);
					keyStore_tREST_3.load(new java.io.FileInputStream(
							keyStoreFile_tREST_3), password_tREST_3);

					javax.net.ssl.KeyManagerFactory kmf_tREST_3 = javax.net.ssl.KeyManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory
									.getDefaultAlgorithm());
					kmf_tREST_3.init(keyStore_tREST_3, password_tREST_3);
					kms_tREST_3 = kmf_tREST_3.getKeyManagers();
				}

				ctx_tREST_3.init(kms_tREST_3, tms_tREST_3, null);
				config_tREST_3
						.getProperties()
						.put(com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
								new com.sun.jersey.client.urlconnection.HTTPSProperties(
										new javax.net.ssl.HostnameVerifier() {

											public boolean verify(
													String hostName,
													javax.net.ssl.SSLSession session) {
												return true;
											}
										}, ctx_tREST_3));

				com.sun.jersey.api.client.Client restClient_tREST_3 = com.sun.jersey.api.client.Client
						.create(config_tREST_3);
				com.sun.jersey.api.client.WebResource restResource_tREST_3;
				if (endpoint_tREST_3 != null && !("").equals(endpoint_tREST_3)) {
					restResource_tREST_3 = restClient_tREST_3
							.resource(endpoint_tREST_3);
				} else {
					throw new IllegalArgumentException("url can't be empty!");
				}

				com.sun.jersey.api.client.ClientResponse errorResponse_tREST_3 = null;
				String restResponse_tREST_3 = "";
				try {

					restResponse_tREST_3 = restResource_tREST_3

					.get(String.class);

				} catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
					errorResponse_tREST_3 = ue.getResponse();
				}

				// for output

				row16 = new row16Struct();
				if (errorResponse_tREST_3 != null) {
					row16.ERROR_CODE = errorResponse_tREST_3.getStatus();
				} else {
					row16.Body = restResponse_tREST_3;
				}

				/**
				 * [tREST_3 begin ] stop
				 */

				/**
				 * [tREST_3 main ] start
				 */

				currentComponent = "tREST_3";

				tos_count_tREST_3++;

				/**
				 * [tREST_3 main ] stop
				 */

				/**
				 * [tLogRow_7 main ] start
				 */

				currentComponent = "tLogRow_7";

				// /////////////////////

				strBuffer_tLogRow_7 = new StringBuilder();

				if (row16.Body != null) { //

					strBuffer_tLogRow_7.append(String.valueOf(row16.Body));

				} //

				strBuffer_tLogRow_7.append("|");

				if (row16.ERROR_CODE != null) { //

					strBuffer_tLogRow_7
							.append(String.valueOf(row16.ERROR_CODE));

				} //

				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_7 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_7 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_7);
				}

				consoleOut_tLogRow_7.println(strBuffer_tLogRow_7.toString());
				consoleOut_tLogRow_7.flush();
				nb_line_tLogRow_7++;
				// ////

				// ////

				// /////////////////////

				tos_count_tLogRow_7++;

				/**
				 * [tLogRow_7 main ] stop
				 */

				/**
				 * [tREST_3 end ] start
				 */

				currentComponent = "tREST_3";

				ok_Hash.put("tREST_3", true);
				end_Hash.put("tREST_3", System.currentTimeMillis());

				/**
				 * [tREST_3 end ] stop
				 */

				/**
				 * [tLogRow_7 end ] start
				 */

				currentComponent = "tLogRow_7";

				// ////
				// ////
				globalMap.put("tLogRow_7_NB_LINE", nb_line_tLogRow_7);

				// /////////////////////

				ok_Hash.put("tLogRow_7", true);
				end_Hash.put("tLogRow_7", System.currentTimeMillis());

				/**
				 * [tLogRow_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tREST_3 finally ] start
				 */

				currentComponent = "tREST_3";

				/**
				 * [tREST_3 finally ] stop
				 */

				/**
				 * [tLogRow_7 finally ] start
				 */

				currentComponent = "tLogRow_7";

				/**
				 * [tLogRow_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tREST_3_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				tREST_3Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];
		static byte[] commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length == 0) {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];
		static byte[] commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];

		public String RDF;

		public String getRDF() {
			return this.RDF;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length == 0) {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF) {

				try {

					int length = 0;

					this.RDF = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.RDF, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RDF=" + RDF);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];
		static byte[] commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];

		public String RDF;

		public String getRDF() {
			return this.RDF;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length == 0) {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF) {

				try {

					int length = 0;

					this.RDF = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.RDF, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RDF=" + RDF);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];
		static byte[] commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];

		public String field;

		public String getField() {
			return this.field;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length == 0) {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF) {

				try {

					int length = 0;

					this.field = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.field, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("field=" + field);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];
		static byte[] commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];

		public String field;

		public String getField() {
			return this.field;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length == 0) {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF) {

				try {

					int length = 0;

					this.field = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.field, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("field=" + field);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];
		static byte[] commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public String noeud;

		public String getNoeud() {
			return this.noeud;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length == 0) {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.noeud = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// String

				writeString(this.noeud, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",noeud=" + noeud);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];
		static byte[] commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public String noeud;

		public String getNoeud() {
			return this.noeud;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length == 0) {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.noeud = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// String

				writeString(this.noeud, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",noeud=" + noeud);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];
		static byte[] commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public String noeud;

		public String getNoeud() {
			return this.noeud;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length == 0) {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.noeud = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// String

				writeString(this.noeud, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",noeud=" + noeud);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];
		static byte[] commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];

		public String properties;

		public String getProperties() {
			return this.properties;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length == 0) {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF) {

				try {

					int length = 0;

					this.properties = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.properties, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("properties=" + properties);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];
		static byte[] commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];

		public String properties;

		public String getProperties() {
			return this.properties;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length == 0) {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF) {

				try {

					int length = 0;

					this.properties = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.properties, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("properties=" + properties);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];
		static byte[] commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length == 0) {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];
		static byte[] commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length == 0) {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];
		static byte[] commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length == 0) {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];
		static byte[] commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length) {
					if (length < 1024
							&& commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF.length == 0) {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[1024];
					} else {
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0,
						length);
				strReturn = new String(
						commonByteArray_BIO2RDF_ES_MAPPING_BIO2RDF, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_BIO2RDF_ES_MAPPING_BIO2RDF) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tREST_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tREST_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				row2Struct row2 = new row2Struct();
				row11Struct row11 = new row11Struct();
				row11Struct row18 = row11;
				row3Struct row3 = new row3Struct();
				row3Struct row4 = row3;
				row5Struct row5 = new row5Struct();
				row5Struct row6 = row5;
				row10Struct row10 = new row10Struct();
				row7Struct row7 = new row7Struct();
				row7Struct row8 = row7;
				row9Struct row9 = new row9Struct();
				row9Struct row13 = row9;
				row15Struct row15 = new row15Struct();

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				int NB_ITERATE_tREST_2 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_1";

				int tos_count_tFlowToIterate_1 = 0;

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tLogRow_4 begin ] start
				 */

				ok_Hash.put("tLogRow_4", false);
				start_Hash.put("tLogRow_4", System.currentTimeMillis());

				currentComponent = "tLogRow_4";

				int tos_count_tLogRow_4 = 0;

				/**
				 * [tLogRow_4 begin ] stop
				 */

				/**
				 * [tNTriplesTemplate_1 begin ] start
				 */

				ok_Hash.put("tNTriplesTemplate_1", false);
				start_Hash.put("tNTriplesTemplate_1",
						System.currentTimeMillis());

				currentComponent = "tNTriplesTemplate_1";

				int tos_count_tNTriplesTemplate_1 = 0;

				int nb_line_tNTriplesTemplate_1 = 0;
				int nb_line_ok_tNTriplesTemplate_1 = 0;

				/**
				 * [tNTriplesTemplate_1 begin ] stop
				 */

				/**
				 * [tLogRow_5 begin ] start
				 */

				ok_Hash.put("tLogRow_5", false);
				start_Hash.put("tLogRow_5", System.currentTimeMillis());

				currentComponent = "tLogRow_5";

				int tos_count_tLogRow_5 = 0;

				/**
				 * [tLogRow_5 begin ] stop
				 */

				/**
				 * [tExtractRegexFields_1 begin ] start
				 */

				ok_Hash.put("tExtractRegexFields_1", false);
				start_Hash.put("tExtractRegexFields_1",
						System.currentTimeMillis());

				currentComponent = "tExtractRegexFields_1";

				int tos_count_tExtractRegexFields_1 = 0;

				java.util.regex.Pattern pattern_tExtractRegexFields_1 = java.util.regex.Pattern
						.compile("^\\{\"(.*?)\":.*$");

				/**
				 * [tExtractRegexFields_1 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				int tos_count_tLogRow_2 = 0;

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_2 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_2", false);
				start_Hash.put("tExtractJSONFields_2",
						System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_2";

				int tos_count_tExtractJSONFields_2 = 0;

				int nb_line_tExtractJSONFields_2 = 0;

				class ConvertJSONString_tExtractJSONFields_2 {
					final static int Brace = 0; // {
					final static int Bracket = 1; // [
					private int barceType = -1;
					private String originalJsonString = "";
					private String originalLoopString = "";
					private String jsonString4XML = null;
					private String loopString4XML = null;
					private String additionRoot = null;

					public void barceType() {

						for (int c = 0; c < originalJsonString.length(); ++c) {
							if (originalJsonString.charAt(c) == '{') {
								barceType = Brace;
								break;
							} else if (originalJsonString.charAt(c) == '[') {
								barceType = Bracket;
								break;
							}
						}
					}

					public void setJsonString(String originalJsonString) {
						this.originalJsonString = originalJsonString;
					}

					public void setLoopString(String originalLoopString) {
						this.originalLoopString = originalLoopString;
					}

					public String getJsonString4XML() {
						return jsonString4XML;
					}

					public String getLoopString4XML() {
						if (loopString4XML.length() > 1
								&& loopString4XML.endsWith("/")) {
							loopString4XML = loopString4XML.substring(0,
									loopString4XML.length() - 1);
						}
						return loopString4XML;
					}

					public void setAdditionRoot(String additionRoot) {
						this.additionRoot = additionRoot;
					}

					public String getAdditionRoot() {
						return additionRoot;
					}

					public void generate() {
						barceType();
						jsonString4XML = originalJsonString;
						loopString4XML = originalLoopString;
						if (Brace == barceType) {
							if (isNeedAddRoot(originalJsonString)) {
								jsonString4XML = "{ \"root\": "
										+ originalJsonString + " }";
								loopString4XML = "root" + originalLoopString;
								setAdditionRoot("root");
							}
						} else if (Bracket == barceType) {
							jsonString4XML = "{ \"root\" : { \"object\": "
									+ originalJsonString + " } }";
							loopString4XML = "root/object" + originalLoopString;
							setAdditionRoot("object");
						}
					}

					public boolean isNeedAddRoot(String originalJsonString) {
						boolean isNeedAddRoot = false;
						net.sf.json.JSONObject jso = net.sf.json.JSONObject
								.fromObject(originalJsonString);
						String jsonKey = "";
						Object firstObject = null;
						if (jso.names().size() == 1) {
							jsonKey = jso.names().get(0).toString();
							firstObject = jso.get(jsonKey);
						}
						if (jso.size() > 1
								|| (firstObject != null
										&& firstObject instanceof net.sf.json.JSONArray && ((net.sf.json.JSONArray) firstObject)
										.size() > 1)) {
							isNeedAddRoot = true;
						}
						return isNeedAddRoot;
					}

				}

				ConvertJSONString_tExtractJSONFields_2 cjs_tExtractJSONFields_2 = new ConvertJSONString_tExtractJSONFields_2();

				de.odysseus.staxon.json.JsonXMLConfig config_tExtractJSONFields_2 = new de.odysseus.staxon.json.JsonXMLConfigBuilder()
						.multiplePI(false).build();
				de.odysseus.staxon.json.JsonXMLInputFactory jsonXMLInputFactory_tExtractJSONFields_2 = new de.odysseus.staxon.json.JsonXMLInputFactory(
						config_tExtractJSONFields_2);
				javax.xml.stream.XMLOutputFactory xmlOutputFactory_tExtractJSONFields_2 = javax.xml.stream.XMLOutputFactory
						.newInstance();
				boolean isGetWholeJson_tExtractJSONFields_2 = false;

				class OriginalJSONString_tExtractJSONFields_2 {

					String originalJSONString = null;
					java.io.ByteArrayInputStream bais = null;
					java.io.ByteArrayOutputStream baos = null;
					de.odysseus.staxon.json.JsonXMLConfig config = null;
					de.odysseus.staxon.json.JsonXMLOutputFactory jxof = null;

					public String getOriginalJSONString(String xmlString,
							String additionRoot, String encoding,
							boolean isGetWholeJson, boolean isArray)
							throws Exception {

						try {
							if (isArray) {
								xmlString = "<list>" + xmlString + "</list>";
							}
							bais = new ByteArrayInputStream(
									xmlString.getBytes(encoding));
							baos = new java.io.ByteArrayOutputStream();
							config = new de.odysseus.staxon.json.JsonXMLConfigBuilder()
									.multiplePI(false).autoArray(true).build();
							jxof = new de.odysseus.staxon.json.JsonXMLOutputFactory(
									config);
							javax.xml.stream.XMLEventReader xmlEventReader = javax.xml.stream.XMLInputFactory
									.newInstance().createXMLEventReader(bais,
											encoding);
							javax.xml.stream.XMLEventWriter xmLEventWriter = jxof
									.createXMLEventWriter(baos);
							xmLEventWriter.add(xmlEventReader);
							xmlEventReader.close();
							xmLEventWriter.close();
							net.sf.json.JSONObject json = net.sf.json.JSONObject
									.fromObject(baos.toString());
							if (isArray) {
								json = json.getJSONObject("list");
							}
							net.sf.json.JSONObject originalJsonObject = null;
							if (!json.isNullObject()) {
								if (additionRoot == null) {
									originalJSONString = json.toString();
								} else {
									if (isGetWholeJson) {
										originalJsonObject = json
												.getJSONObject(additionRoot);
										if (!originalJsonObject.isNullObject()) {
											originalJSONString = originalJsonObject
													.toString();
										}
									} else {
										originalJSONString = json.toString();
									}
								}
							}
						} finally {
							baos.close();
							if (bais != null) {
								bais.close();
							}
						}

						return originalJSONString;
					}

					public String getOriginalJSONString(String xmlString,
							String additionRoot, String encoding,
							boolean isGetWholeJson) throws Exception {
						return getOriginalJSONString(xmlString, additionRoot,
								encoding, isGetWholeJson, false);
					}
				}

				OriginalJSONString_tExtractJSONFields_2 originalJSONString_tExtractJSONFields_2 = new OriginalJSONString_tExtractJSONFields_2();

				class XML_API_tExtractJSONFields_2 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				String jsonStr_tExtractJSONFields_2 = "";
				String xmlStr_tExtractJSONFields_2 = "";

				XML_API_tExtractJSONFields_2 xml_api_tExtractJSONFields_2 = new XML_API_tExtractJSONFields_2();

				/**
				 * [tExtractJSONFields_2 begin ] stop
				 */

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				int tos_count_tLogRow_3 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
				java.io.PrintStream consoleOut_tLogRow_3 = null;

				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
				// /////////////////////

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_1 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_1", false);
				start_Hash.put("tExtractJSONFields_1",
						System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_1";

				int tos_count_tExtractJSONFields_1 = 0;

				int nb_line_tExtractJSONFields_1 = 0;

				class ConvertJSONString_tExtractJSONFields_1 {
					final static int Brace = 0; // {
					final static int Bracket = 1; // [
					private int barceType = -1;
					private String originalJsonString = "";
					private String originalLoopString = "";
					private String jsonString4XML = null;
					private String loopString4XML = null;
					private String additionRoot = null;

					public void barceType() {

						for (int c = 0; c < originalJsonString.length(); ++c) {
							if (originalJsonString.charAt(c) == '{') {
								barceType = Brace;
								break;
							} else if (originalJsonString.charAt(c) == '[') {
								barceType = Bracket;
								break;
							}
						}
					}

					public void setJsonString(String originalJsonString) {
						this.originalJsonString = originalJsonString;
					}

					public void setLoopString(String originalLoopString) {
						this.originalLoopString = originalLoopString;
					}

					public String getJsonString4XML() {
						return jsonString4XML;
					}

					public String getLoopString4XML() {
						if (loopString4XML.length() > 1
								&& loopString4XML.endsWith("/")) {
							loopString4XML = loopString4XML.substring(0,
									loopString4XML.length() - 1);
						}
						return loopString4XML;
					}

					public void setAdditionRoot(String additionRoot) {
						this.additionRoot = additionRoot;
					}

					public String getAdditionRoot() {
						return additionRoot;
					}

					public void generate() {
						barceType();
						jsonString4XML = originalJsonString;
						loopString4XML = originalLoopString;
						if (Brace == barceType) {
							if (isNeedAddRoot(originalJsonString)) {
								jsonString4XML = "{ \"root\": "
										+ originalJsonString + " }";
								loopString4XML = "root" + originalLoopString;
								setAdditionRoot("root");
							}
						} else if (Bracket == barceType) {
							jsonString4XML = "{ \"root\" : { \"object\": "
									+ originalJsonString + " } }";
							loopString4XML = "root/object" + originalLoopString;
							setAdditionRoot("object");
						}
					}

					public boolean isNeedAddRoot(String originalJsonString) {
						boolean isNeedAddRoot = false;
						net.sf.json.JSONObject jso = net.sf.json.JSONObject
								.fromObject(originalJsonString);
						String jsonKey = "";
						Object firstObject = null;
						if (jso.names().size() == 1) {
							jsonKey = jso.names().get(0).toString();
							firstObject = jso.get(jsonKey);
						}
						if (jso.size() > 1
								|| (firstObject != null
										&& firstObject instanceof net.sf.json.JSONArray && ((net.sf.json.JSONArray) firstObject)
										.size() > 1)) {
							isNeedAddRoot = true;
						}
						return isNeedAddRoot;
					}

				}

				ConvertJSONString_tExtractJSONFields_1 cjs_tExtractJSONFields_1 = new ConvertJSONString_tExtractJSONFields_1();

				de.odysseus.staxon.json.JsonXMLConfig config_tExtractJSONFields_1 = new de.odysseus.staxon.json.JsonXMLConfigBuilder()
						.multiplePI(false).build();
				de.odysseus.staxon.json.JsonXMLInputFactory jsonXMLInputFactory_tExtractJSONFields_1 = new de.odysseus.staxon.json.JsonXMLInputFactory(
						config_tExtractJSONFields_1);
				javax.xml.stream.XMLOutputFactory xmlOutputFactory_tExtractJSONFields_1 = javax.xml.stream.XMLOutputFactory
						.newInstance();
				boolean isGetWholeJson_tExtractJSONFields_1 = false;

				class OriginalJSONString_tExtractJSONFields_1 {

					String originalJSONString = null;
					java.io.ByteArrayInputStream bais = null;
					java.io.ByteArrayOutputStream baos = null;
					de.odysseus.staxon.json.JsonXMLConfig config = null;
					de.odysseus.staxon.json.JsonXMLOutputFactory jxof = null;

					public String getOriginalJSONString(String xmlString,
							String additionRoot, String encoding,
							boolean isGetWholeJson, boolean isArray)
							throws Exception {

						try {
							if (isArray) {
								xmlString = "<list>" + xmlString + "</list>";
							}
							bais = new ByteArrayInputStream(
									xmlString.getBytes(encoding));
							baos = new java.io.ByteArrayOutputStream();
							config = new de.odysseus.staxon.json.JsonXMLConfigBuilder()
									.multiplePI(false).autoArray(true).build();
							jxof = new de.odysseus.staxon.json.JsonXMLOutputFactory(
									config);
							javax.xml.stream.XMLEventReader xmlEventReader = javax.xml.stream.XMLInputFactory
									.newInstance().createXMLEventReader(bais,
											encoding);
							javax.xml.stream.XMLEventWriter xmLEventWriter = jxof
									.createXMLEventWriter(baos);
							xmLEventWriter.add(xmlEventReader);
							xmlEventReader.close();
							xmLEventWriter.close();
							net.sf.json.JSONObject json = net.sf.json.JSONObject
									.fromObject(baos.toString());
							if (isArray) {
								json = json.getJSONObject("list");
							}
							net.sf.json.JSONObject originalJsonObject = null;
							if (!json.isNullObject()) {
								if (additionRoot == null) {
									originalJSONString = json.toString();
								} else {
									if (isGetWholeJson) {
										originalJsonObject = json
												.getJSONObject(additionRoot);
										if (!originalJsonObject.isNullObject()) {
											originalJSONString = originalJsonObject
													.toString();
										}
									} else {
										originalJSONString = json.toString();
									}
								}
							}
						} finally {
							baos.close();
							if (bais != null) {
								bais.close();
							}
						}

						return originalJSONString;
					}

					public String getOriginalJSONString(String xmlString,
							String additionRoot, String encoding,
							boolean isGetWholeJson) throws Exception {
						return getOriginalJSONString(xmlString, additionRoot,
								encoding, isGetWholeJson, false);
					}
				}

				OriginalJSONString_tExtractJSONFields_1 originalJSONString_tExtractJSONFields_1 = new OriginalJSONString_tExtractJSONFields_1();

				class XML_API_tExtractJSONFields_1 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				String jsonStr_tExtractJSONFields_1 = "";
				String xmlStr_tExtractJSONFields_1 = "";

				XML_API_tExtractJSONFields_1 xml_api_tExtractJSONFields_1 = new XML_API_tExtractJSONFields_1();

				/**
				 * [tExtractJSONFields_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tReplace_1 begin ] start
				 */

				ok_Hash.put("tReplace_1", false);
				start_Hash.put("tReplace_1", System.currentTimeMillis());

				currentComponent = "tReplace_1";

				int tos_count_tReplace_1 = 0;

				int nb_line_tReplace_1 = 0;

				/**
				 * [tReplace_1 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tREST_1 begin ] start
				 */

				ok_Hash.put("tREST_1", false);
				start_Hash.put("tREST_1", System.currentTimeMillis());

				currentComponent = "tREST_1";

				int tos_count_tREST_1 = 0;

				String endpoint_tREST_1 = "http://" + context.hostES + "/"
						+ context.index + "/_mappings/" + context.type;

				String trustStoreFile_tREST_1 = System
						.getProperty("javax.net.ssl.trustStore");
				String trustStoreType_tREST_1 = System
						.getProperty("javax.net.ssl.trustStoreType");
				String trustStorePWD_tREST_1 = System
						.getProperty("javax.net.ssl.trustStorePassword");

				String keyStoreFile_tREST_1 = System
						.getProperty("javax.net.ssl.keyStore");
				String keyStoreType_tREST_1 = System
						.getProperty("javax.net.ssl.keyStoreType");
				String keyStorePWD_tREST_1 = System
						.getProperty("javax.net.ssl.keyStorePassword");

				com.sun.jersey.api.client.config.ClientConfig config_tREST_1 = new com.sun.jersey.api.client.config.DefaultClientConfig();
				javax.net.ssl.SSLContext ctx_tREST_1 = javax.net.ssl.SSLContext
						.getInstance("SSL");

				javax.net.ssl.TrustManager[] tms_tREST_1 = null;
				if (trustStoreFile_tREST_1 != null
						&& trustStoreType_tREST_1 != null) {
					char[] password_tREST_1 = null;
					if (trustStorePWD_tREST_1 != null)
						password_tREST_1 = trustStorePWD_tREST_1.toCharArray();
					java.security.KeyStore trustStore_tREST_1 = java.security.KeyStore
							.getInstance(trustStoreType_tREST_1);
					trustStore_tREST_1.load(new java.io.FileInputStream(
							trustStoreFile_tREST_1), password_tREST_1);

					javax.net.ssl.TrustManagerFactory tmf_tREST_1 = javax.net.ssl.TrustManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory
									.getDefaultAlgorithm());
					tmf_tREST_1.init(trustStore_tREST_1);
					tms_tREST_1 = tmf_tREST_1.getTrustManagers();
				}

				javax.net.ssl.KeyManager[] kms_tREST_1 = null;
				if (keyStoreFile_tREST_1 != null
						&& keyStoreType_tREST_1 != null) {
					char[] password_tREST_1 = null;
					if (keyStorePWD_tREST_1 != null)
						password_tREST_1 = keyStorePWD_tREST_1.toCharArray();
					java.security.KeyStore keyStore_tREST_1 = java.security.KeyStore
							.getInstance(keyStoreType_tREST_1);
					keyStore_tREST_1.load(new java.io.FileInputStream(
							keyStoreFile_tREST_1), password_tREST_1);

					javax.net.ssl.KeyManagerFactory kmf_tREST_1 = javax.net.ssl.KeyManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory
									.getDefaultAlgorithm());
					kmf_tREST_1.init(keyStore_tREST_1, password_tREST_1);
					kms_tREST_1 = kmf_tREST_1.getKeyManagers();
				}

				ctx_tREST_1.init(kms_tREST_1, tms_tREST_1, null);
				config_tREST_1
						.getProperties()
						.put(com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
								new com.sun.jersey.client.urlconnection.HTTPSProperties(
										new javax.net.ssl.HostnameVerifier() {

											public boolean verify(
													String hostName,
													javax.net.ssl.SSLSession session) {
												return true;
											}
										}, ctx_tREST_1));

				com.sun.jersey.api.client.Client restClient_tREST_1 = com.sun.jersey.api.client.Client
						.create(config_tREST_1);
				com.sun.jersey.api.client.WebResource restResource_tREST_1;
				if (endpoint_tREST_1 != null && !("").equals(endpoint_tREST_1)) {
					restResource_tREST_1 = restClient_tREST_1
							.resource(endpoint_tREST_1);
				} else {
					throw new IllegalArgumentException("url can't be empty!");
				}

				com.sun.jersey.api.client.ClientResponse errorResponse_tREST_1 = null;
				String restResponse_tREST_1 = "";
				try {

					restResponse_tREST_1 = restResource_tREST_1

					.get(String.class);

				} catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
					errorResponse_tREST_1 = ue.getResponse();
				}

				// for output

				row1 = new row1Struct();
				if (errorResponse_tREST_1 != null) {
					row1.ERROR_CODE = errorResponse_tREST_1.getStatus();
				} else {
					row1.Body = restResponse_tREST_1;
				}

				/**
				 * [tREST_1 begin ] stop
				 */

				/**
				 * [tREST_1 main ] start
				 */

				currentComponent = "tREST_1";

				tos_count_tREST_1++;

				/**
				 * [tREST_1 main ] stop
				 */

				/**
				 * [tUnite_1 main ] start
				 */

				currentComponent = "tUnite_1";

				// ////////

				// for output
				row2 = new row2Struct();

				row2.Body = row1.Body;
				row2.ERROR_CODE = row1.ERROR_CODE;

				nb_line_tUnite_1++;

				// ////////

				tos_count_tUnite_1++;

				/**
				 * [tUnite_1 main ] stop
				 */

				/**
				 * [tReplace_1 main ] start
				 */

				currentComponent = "tReplace_1";

				String searchStr_tReplace_1_1 = "@" + "";
				row2.Body = StringUtils.replaceAllStrictly(row2.Body,
						searchStr_tReplace_1_1, "" + "", false, false);
				String searchStr_tReplace_1_2 = "genotype/phenotype" + "";
				row2.Body = StringUtils.replaceAllStrictly(row2.Body,
						searchStr_tReplace_1_2, "genotype_phenotype" + "",
						false, false);
				String searchStr_tReplace_1_3 = "." + "";
				row2.Body = StringUtils.replaceAllStrictly(row2.Body,
						searchStr_tReplace_1_3, "_" + "", false, false);
				row11.Body = row2.Body;

				row11.ERROR_CODE = row2.ERROR_CODE;

				nb_line_tReplace_1++;

				tos_count_tReplace_1++;

				/**
				 * [tReplace_1 main ] stop
				 */

				/**
				 * [tLogRow_1 main ] start
				 */

				currentComponent = "tLogRow_1";

				// /////////////////////

				strBuffer_tLogRow_1 = new StringBuilder();

				if (row11.Body != null) { //

					strBuffer_tLogRow_1.append(String.valueOf(row11.Body));

				} //

				strBuffer_tLogRow_1.append("|");

				if (row11.ERROR_CODE != null) { //

					strBuffer_tLogRow_1
							.append(String.valueOf(row11.ERROR_CODE));

				} //

				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
				consoleOut_tLogRow_1.flush();
				nb_line_tLogRow_1++;
				// ////

				// ////

				// /////////////////////

				row18 = row11;

				tos_count_tLogRow_1++;

				/**
				 * [tLogRow_1 main ] stop
				 */

				/**
				 * [tExtractJSONFields_1 main ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				if (row18.Body != null) {// C_01
					jsonStr_tExtractJSONFields_1 = row18.Body.toString();

					row3 = null;
					org.dom4j.io.SAXReader reader_tExtractJSONFields_1 = new org.dom4j.io.SAXReader();
					org.dom4j.Document doc_tExtractJSONFields_1 = null;
					java.util.HashMap xmlNameSpaceMap_tExtractJSONFields_1 = new java.util.HashMap<String, String>();
					org.dom4j.XPath x_tExtractJSONFields_1 = null;
					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tExtractJSONFields_1 = null;
					boolean isStructError_tExtractJSONFields_1 = true;

					String loopQuery_tExtractJSONFields_1 = "/" + context.index
							+ "/mappings/" + context.type + "/properties";
					String oraginalJsonStr_tExtractJSONFields_1 = jsonStr_tExtractJSONFields_1;
					cjs_tExtractJSONFields_1
							.setJsonString(jsonStr_tExtractJSONFields_1);
					cjs_tExtractJSONFields_1
							.setLoopString(loopQuery_tExtractJSONFields_1);
					java.io.ByteArrayInputStream bais_tExtractJSONFields_1 = null;
					java.io.ByteArrayOutputStream baos_tExtractJSONFields_1 = new java.io.ByteArrayOutputStream();
					try {
						cjs_tExtractJSONFields_1.generate();
						jsonStr_tExtractJSONFields_1 = cjs_tExtractJSONFields_1
								.getJsonString4XML();
						loopQuery_tExtractJSONFields_1 = cjs_tExtractJSONFields_1
								.getLoopString4XML();
						bais_tExtractJSONFields_1 = new ByteArrayInputStream(
								jsonStr_tExtractJSONFields_1.getBytes("UTF-8"));
						javax.xml.stream.XMLEventReader xmlEventReader_tExtractJSONFields_1 = jsonXMLInputFactory_tExtractJSONFields_1
								.createXMLEventReader(bais_tExtractJSONFields_1);
						javax.xml.stream.XMLEventWriter xmLEventWriter_tExtractJSONFields_1 = xmlOutputFactory_tExtractJSONFields_1
								.createXMLEventWriter(
										baos_tExtractJSONFields_1, "UTF-8");
						xmLEventWriter_tExtractJSONFields_1
								.add(xmlEventReader_tExtractJSONFields_1);
						// convert json string to xml
						xmlStr_tExtractJSONFields_1 = baos_tExtractJSONFields_1
								.toString();
						xmLEventWriter_tExtractJSONFields_1.close();
						xmlEventReader_tExtractJSONFields_1.close();

						doc_tExtractJSONFields_1 = reader_tExtractJSONFields_1
								.read(new java.io.StringReader(
										xmlStr_tExtractJSONFields_1));
						x_tExtractJSONFields_1 = doc_tExtractJSONFields_1
								.createXPath(loopQuery_tExtractJSONFields_1);
						x_tExtractJSONFields_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
						nodeList_tExtractJSONFields_1 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tExtractJSONFields_1
								.selectNodes(doc_tExtractJSONFields_1);
						isStructError_tExtractJSONFields_1 = false;

					} catch (java.lang.Exception ex_tExtractJSONFields_1) {
						System.err
								.println(ex_tExtractJSONFields_1.getMessage());
					} finally {
						baos_tExtractJSONFields_1.close();
						if (bais_tExtractJSONFields_1 != null) {
							bais_tExtractJSONFields_1.close();
						}
					}

					org.dom4j.Node node_tExtractJSONFields_1 = null;
					String str_tExtractJSONFields_1 = "";
					for (int i_tExtractJSONFields_1 = 0; isStructError_tExtractJSONFields_1
							|| (nodeList_tExtractJSONFields_1 != null && i_tExtractJSONFields_1 < nodeList_tExtractJSONFields_1
									.size()); i_tExtractJSONFields_1++) {

						if (!isStructError_tExtractJSONFields_1) {
							row3 = null;
							row3 = new row3Struct();

							org.dom4j.tree.AbstractNode temp_tExtractJSONFields_1 = nodeList_tExtractJSONFields_1
									.get(i_tExtractJSONFields_1);

							nb_line_tExtractJSONFields_1++;
							try {
								org.dom4j.XPath xTmp0_tExtractJSONFields_1 = temp_tExtractJSONFields_1
										.createXPath(".");
								xTmp0_tExtractJSONFields_1
										.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_1);
								Object obj0_tExtractJSONFields_1 = xTmp0_tExtractJSONFields_1
										.evaluate(temp_tExtractJSONFields_1);
								if (obj0_tExtractJSONFields_1 instanceof String
										|| obj0_tExtractJSONFields_1 instanceof Number) {
									node_tExtractJSONFields_1 = temp_tExtractJSONFields_1;
									str_tExtractJSONFields_1 = String
											.valueOf(obj0_tExtractJSONFields_1);
								} else {
									node_tExtractJSONFields_1 = xTmp0_tExtractJSONFields_1
											.selectSingleNode(temp_tExtractJSONFields_1);

									if (node_tExtractJSONFields_1 == null) {
										str_tExtractJSONFields_1 = null;
									} else {
										str_tExtractJSONFields_1 = originalJSONString_tExtractJSONFields_1
												.getOriginalJSONString(
														node_tExtractJSONFields_1
																.asXML(),
														cjs_tExtractJSONFields_1
																.getAdditionRoot(),
														"UTF-8",
														isGetWholeJson_tExtractJSONFields_1);
									}
									isGetWholeJson_tExtractJSONFields_1 = false;

								}

								row3.properties = str_tExtractJSONFields_1;

							} catch (java.lang.Exception ex_tExtractJSONFields_1) {
								System.err.println(ex_tExtractJSONFields_1
										.getMessage());
								row3 = null;
							}
						}

						isStructError_tExtractJSONFields_1 = false;

						tos_count_tExtractJSONFields_1++;

						/**
						 * [tExtractJSONFields_1 main ] stop
						 */
						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tLogRow_3 main ] start
							 */

							currentComponent = "tLogRow_3";

							// /////////////////////

							strBuffer_tLogRow_3 = new StringBuilder();

							if (row3.properties != null) { //

								strBuffer_tLogRow_3.append(String
										.valueOf(row3.properties));

							} //

							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap
										.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_3 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(
												System.out));
								globalMap.put("tLogRow_CONSOLE",
										consoleOut_tLogRow_3);
							}

							consoleOut_tLogRow_3.println(strBuffer_tLogRow_3
									.toString());
							consoleOut_tLogRow_3.flush();
							nb_line_tLogRow_3++;
							// ////

							// ////

							// /////////////////////

							row4 = row3;

							tos_count_tLogRow_3++;

							/**
							 * [tLogRow_3 main ] stop
							 */

							/**
							 * [tExtractJSONFields_2 main ] start
							 */

							currentComponent = "tExtractJSONFields_2";

							if (row4.properties != null) {// C_01
								jsonStr_tExtractJSONFields_2 = row4.properties
										.toString();

								row5 = null;
								org.dom4j.io.SAXReader reader_tExtractJSONFields_2 = new org.dom4j.io.SAXReader();
								org.dom4j.Document doc_tExtractJSONFields_2 = null;
								java.util.HashMap xmlNameSpaceMap_tExtractJSONFields_2 = new java.util.HashMap<String, String>();
								org.dom4j.XPath x_tExtractJSONFields_2 = null;
								java.util.List<org.dom4j.tree.AbstractNode> nodeList_tExtractJSONFields_2 = null;
								boolean isStructError_tExtractJSONFields_2 = true;

								String loopQuery_tExtractJSONFields_2 = "/properties/*/type";
								String oraginalJsonStr_tExtractJSONFields_2 = jsonStr_tExtractJSONFields_2;
								cjs_tExtractJSONFields_2
										.setJsonString(jsonStr_tExtractJSONFields_2);
								cjs_tExtractJSONFields_2
										.setLoopString(loopQuery_tExtractJSONFields_2);
								java.io.ByteArrayInputStream bais_tExtractJSONFields_2 = null;
								java.io.ByteArrayOutputStream baos_tExtractJSONFields_2 = new java.io.ByteArrayOutputStream();
								try {
									cjs_tExtractJSONFields_2.generate();
									jsonStr_tExtractJSONFields_2 = cjs_tExtractJSONFields_2
											.getJsonString4XML();
									loopQuery_tExtractJSONFields_2 = cjs_tExtractJSONFields_2
											.getLoopString4XML();
									bais_tExtractJSONFields_2 = new ByteArrayInputStream(
											jsonStr_tExtractJSONFields_2
													.getBytes("UTF-8"));
									javax.xml.stream.XMLEventReader xmlEventReader_tExtractJSONFields_2 = jsonXMLInputFactory_tExtractJSONFields_2
											.createXMLEventReader(bais_tExtractJSONFields_2);
									javax.xml.stream.XMLEventWriter xmLEventWriter_tExtractJSONFields_2 = xmlOutputFactory_tExtractJSONFields_2
											.createXMLEventWriter(
													baos_tExtractJSONFields_2,
													"UTF-8");
									xmLEventWriter_tExtractJSONFields_2
											.add(xmlEventReader_tExtractJSONFields_2);
									// convert json string to xml
									xmlStr_tExtractJSONFields_2 = baos_tExtractJSONFields_2
											.toString();
									xmLEventWriter_tExtractJSONFields_2.close();
									xmlEventReader_tExtractJSONFields_2.close();

									doc_tExtractJSONFields_2 = reader_tExtractJSONFields_2
											.read(new java.io.StringReader(
													xmlStr_tExtractJSONFields_2));
									x_tExtractJSONFields_2 = doc_tExtractJSONFields_2
											.createXPath(loopQuery_tExtractJSONFields_2);
									x_tExtractJSONFields_2
											.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_2);
									nodeList_tExtractJSONFields_2 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tExtractJSONFields_2
											.selectNodes(doc_tExtractJSONFields_2);
									isStructError_tExtractJSONFields_2 = false;

								} catch (java.lang.Exception ex_tExtractJSONFields_2) {
									System.err.println(ex_tExtractJSONFields_2
											.getMessage());
								} finally {
									baos_tExtractJSONFields_2.close();
									if (bais_tExtractJSONFields_2 != null) {
										bais_tExtractJSONFields_2.close();
									}
								}

								org.dom4j.Node node_tExtractJSONFields_2 = null;
								String str_tExtractJSONFields_2 = "";
								for (int i_tExtractJSONFields_2 = 0; isStructError_tExtractJSONFields_2
										|| (nodeList_tExtractJSONFields_2 != null && i_tExtractJSONFields_2 < nodeList_tExtractJSONFields_2
												.size()); i_tExtractJSONFields_2++) {

									if (!isStructError_tExtractJSONFields_2) {
										row5 = null;
										row5 = new row5Struct();

										org.dom4j.tree.AbstractNode temp_tExtractJSONFields_2 = nodeList_tExtractJSONFields_2
												.get(i_tExtractJSONFields_2);

										nb_line_tExtractJSONFields_2++;
										try {
											org.dom4j.XPath xTmp0_tExtractJSONFields_2 = temp_tExtractJSONFields_2
													.createXPath(".");
											xTmp0_tExtractJSONFields_2
													.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_2);
											Object obj0_tExtractJSONFields_2 = xTmp0_tExtractJSONFields_2
													.evaluate(temp_tExtractJSONFields_2);
											if (obj0_tExtractJSONFields_2 instanceof String
													|| obj0_tExtractJSONFields_2 instanceof Number) {
												node_tExtractJSONFields_2 = temp_tExtractJSONFields_2;
												str_tExtractJSONFields_2 = String
														.valueOf(obj0_tExtractJSONFields_2);
											} else {
												node_tExtractJSONFields_2 = xTmp0_tExtractJSONFields_2
														.selectSingleNode(temp_tExtractJSONFields_2);

												str_tExtractJSONFields_2 = xTmp0_tExtractJSONFields_2
														.valueOf(temp_tExtractJSONFields_2);

											}

											if (xml_api_tExtractJSONFields_2
													.isDefNull(node_tExtractJSONFields_2)) {
												row5.type = null;
											} else if (xml_api_tExtractJSONFields_2
													.isEmpty(node_tExtractJSONFields_2)) {
												row5.type = "";
											} else if (xml_api_tExtractJSONFields_2
													.isMissing(node_tExtractJSONFields_2)) {
												row5.type = null;
											} else {

												row5.type = str_tExtractJSONFields_2;

											}

											org.dom4j.XPath xTmp1_tExtractJSONFields_2 = temp_tExtractJSONFields_2
													.createXPath("..");
											xTmp1_tExtractJSONFields_2
													.setNamespaceURIs(xmlNameSpaceMap_tExtractJSONFields_2);
											Object obj1_tExtractJSONFields_2 = xTmp1_tExtractJSONFields_2
													.evaluate(temp_tExtractJSONFields_2);
											if (obj1_tExtractJSONFields_2 instanceof String
													|| obj1_tExtractJSONFields_2 instanceof Number) {
												node_tExtractJSONFields_2 = temp_tExtractJSONFields_2;
												str_tExtractJSONFields_2 = String
														.valueOf(obj1_tExtractJSONFields_2);
											} else {
												node_tExtractJSONFields_2 = xTmp1_tExtractJSONFields_2
														.selectSingleNode(temp_tExtractJSONFields_2);

												if (node_tExtractJSONFields_2 == null) {
													str_tExtractJSONFields_2 = null;
												} else {
													str_tExtractJSONFields_2 = originalJSONString_tExtractJSONFields_2
															.getOriginalJSONString(
																	node_tExtractJSONFields_2
																			.asXML(),
																	cjs_tExtractJSONFields_2
																			.getAdditionRoot(),
																	"UTF-8",
																	isGetWholeJson_tExtractJSONFields_2);
												}
												isGetWholeJson_tExtractJSONFields_2 = false;

											}

											row5.noeud = str_tExtractJSONFields_2;

										} catch (java.lang.Exception ex_tExtractJSONFields_2) {
											System.err
													.println(ex_tExtractJSONFields_2
															.getMessage());
											row5 = null;
										}
									}

									isStructError_tExtractJSONFields_2 = false;

									tos_count_tExtractJSONFields_2++;

									/**
									 * [tExtractJSONFields_2 main ] stop
									 */
									// Start of branch "row5"
									if (row5 != null) {

										/**
										 * [tLogRow_2 main ] start
										 */

										currentComponent = "tLogRow_2";

										row6 = row5;

										tos_count_tLogRow_2++;

										/**
										 * [tLogRow_2 main ] stop
										 */

										/**
										 * [tFilterRow_1 main ] start
										 */

										currentComponent = "tFilterRow_1";

										row10 = null;
										Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
												"&&");
										ope_tFilterRow_1
												.matches(
														(row6.type == null ? false
																: row6.type
																		.compareTo("string") == 0),
														"type.compareTo(\"string\") == 0 failed");

										if (ope_tFilterRow_1.getMatchFlag()) {
											if (row10 == null) {
												row10 = new row10Struct();
											}
											row10.type = row6.type;
											row10.noeud = row6.noeud;
											nb_line_ok_tFilterRow_1++;
										} else {
											nb_line_reject_tFilterRow_1++;
										}

										nb_line_tFilterRow_1++;

										tos_count_tFilterRow_1++;

										/**
										 * [tFilterRow_1 main ] stop
										 */
										// Start of branch "row10"
										if (row10 != null) {

											/**
											 * [tExtractRegexFields_1 main ]
											 * start
											 */

											currentComponent = "tExtractRegexFields_1";

											row7 = null;
											if (row10.noeud != null) {// C_01
												java.util.regex.Matcher matcher_tExtractRegexFields_1 = pattern_tExtractRegexFields_1
														.matcher(row10.noeud);

												int groupCount_tExtractRegexFields_1 = matcher_tExtractRegexFields_1
														.groupCount();
												while (matcher_tExtractRegexFields_1
														.find()) {

													try {
														row7 = new row7Struct();

														String temp_tExtractRegexFields_1 = null;
														row7.field = groupCount_tExtractRegexFields_1 <= 0 ? ""
																: matcher_tExtractRegexFields_1
																		.group(1);
													} catch (java.lang.Exception ex_tExtractRegexFields_1) {
														throw (ex_tExtractRegexFields_1);
													}

													tos_count_tExtractRegexFields_1++;

													/**
													 * [tExtractRegexFields_1
													 * main ] stop
													 */
													// Start of branch "row7"
													if (row7 != null) {

														/**
														 * [tLogRow_5 main ]
														 * start
														 */

														currentComponent = "tLogRow_5";

														row8 = row7;

														tos_count_tLogRow_5++;

														/**
														 * [tLogRow_5 main ]
														 * stop
														 */

														/**
														 * [tNTriplesTemplate_1
														 * main ] start
														 */

														currentComponent = "tNTriplesTemplate_1";

														row9.RDF = "{~n~    \"%TYPE\" : {~n~        \"properties\" : {~n~    \"%FIELD\":{~n~        \"type\":\"string\",~n~        \"fields\":{~n~            \"raw\":{~n~                \"type\":\"string\",~n~                \"index\":\"not_analyzed\"~n~            }~n~        }~n~    }~n~}}}";

														String searchStr_tNTriplesTemplate_1_1 = "%FIELD"
																+ "";
														row9.RDF = StringUtils
																.replaceAll(
																		row9.RDF,
																		searchStr_tNTriplesTemplate_1_1,
																		row7.field
																				+ "")
																.replace("~n~",
																		"\n");
														String searchStr_tNTriplesTemplate_1_2 = "%TYPE"
																+ "";
														row9.RDF = StringUtils
																.replaceAll(
																		row9.RDF,
																		searchStr_tNTriplesTemplate_1_2,
																		context.type
																				+ "")
																.replace("~n~",
																		"\n");
														nb_line_ok_tNTriplesTemplate_1++;
														// row9.RDF = row8.RDF;

														nb_line_tNTriplesTemplate_1++;

														tos_count_tNTriplesTemplate_1++;

														/**
														 * [tNTriplesTemplate_1
														 * main ] stop
														 */

														/**
														 * [tLogRow_4 main ]
														 * start
														 */

														currentComponent = "tLogRow_4";

														row13 = row9;

														tos_count_tLogRow_4++;

														/**
														 * [tLogRow_4 main ]
														 * stop
														 */

														/**
														 * [tFlowToIterate_1
														 * main ] start
														 */

														currentComponent = "tFlowToIterate_1";

														globalMap.put(
																"row13.RDF",
																row13.RDF);
														nb_line_tFlowToIterate_1++;

														counter_tFlowToIterate_1++;
														globalMap
																.put("tFlowToIterate_1_CURRENT_ITERATION",
																		counter_tFlowToIterate_1);

														tos_count_tFlowToIterate_1++;

														/**
														 * [tFlowToIterate_1
														 * main ] stop
														 */
														NB_ITERATE_tREST_2++;

														/**
														 * [tLogRow_6 begin ]
														 * start
														 */

														ok_Hash.put(
																"tLogRow_6",
																false);
														start_Hash
																.put("tLogRow_6",
																		System.currentTimeMillis());

														currentComponent = "tLogRow_6";

														int tos_count_tLogRow_6 = 0;

														// /////////////////////

														final String OUTPUT_FIELD_SEPARATOR_tLogRow_6 = "|";
														java.io.PrintStream consoleOut_tLogRow_6 = null;

														StringBuilder strBuffer_tLogRow_6 = null;
														int nb_line_tLogRow_6 = 0;
														// /////////////////////

														/**
														 * [tLogRow_6 begin ]
														 * stop
														 */

														/**
														 * [tREST_2 begin ]
														 * start
														 */

														ok_Hash.put("tREST_2",
																false);
														start_Hash
																.put("tREST_2",
																		System.currentTimeMillis());

														currentComponent = "tREST_2";

														int tos_count_tREST_2 = 0;

														String endpoint_tREST_2 = "http://"
																+ context.hostES
																+ "/"
																+ context.index
																+ "/_mappings/"
																+ context.type;

														String trustStoreFile_tREST_2 = System
																.getProperty("javax.net.ssl.trustStore");
														String trustStoreType_tREST_2 = System
																.getProperty("javax.net.ssl.trustStoreType");
														String trustStorePWD_tREST_2 = System
																.getProperty("javax.net.ssl.trustStorePassword");

														String keyStoreFile_tREST_2 = System
																.getProperty("javax.net.ssl.keyStore");
														String keyStoreType_tREST_2 = System
																.getProperty("javax.net.ssl.keyStoreType");
														String keyStorePWD_tREST_2 = System
																.getProperty("javax.net.ssl.keyStorePassword");

														com.sun.jersey.api.client.config.ClientConfig config_tREST_2 = new com.sun.jersey.api.client.config.DefaultClientConfig();
														javax.net.ssl.SSLContext ctx_tREST_2 = javax.net.ssl.SSLContext
																.getInstance("SSL");

														javax.net.ssl.TrustManager[] tms_tREST_2 = null;
														if (trustStoreFile_tREST_2 != null
																&& trustStoreType_tREST_2 != null) {
															char[] password_tREST_2 = null;
															if (trustStorePWD_tREST_2 != null)
																password_tREST_2 = trustStorePWD_tREST_2
																		.toCharArray();
															java.security.KeyStore trustStore_tREST_2 = java.security.KeyStore
																	.getInstance(trustStoreType_tREST_2);
															trustStore_tREST_2
																	.load(new java.io.FileInputStream(
																			trustStoreFile_tREST_2),
																			password_tREST_2);

															javax.net.ssl.TrustManagerFactory tmf_tREST_2 = javax.net.ssl.TrustManagerFactory
																	.getInstance(javax.net.ssl.KeyManagerFactory
																			.getDefaultAlgorithm());
															tmf_tREST_2
																	.init(trustStore_tREST_2);
															tms_tREST_2 = tmf_tREST_2
																	.getTrustManagers();
														}

														javax.net.ssl.KeyManager[] kms_tREST_2 = null;
														if (keyStoreFile_tREST_2 != null
																&& keyStoreType_tREST_2 != null) {
															char[] password_tREST_2 = null;
															if (keyStorePWD_tREST_2 != null)
																password_tREST_2 = keyStorePWD_tREST_2
																		.toCharArray();
															java.security.KeyStore keyStore_tREST_2 = java.security.KeyStore
																	.getInstance(keyStoreType_tREST_2);
															keyStore_tREST_2
																	.load(new java.io.FileInputStream(
																			keyStoreFile_tREST_2),
																			password_tREST_2);

															javax.net.ssl.KeyManagerFactory kmf_tREST_2 = javax.net.ssl.KeyManagerFactory
																	.getInstance(javax.net.ssl.KeyManagerFactory
																			.getDefaultAlgorithm());
															kmf_tREST_2
																	.init(keyStore_tREST_2,
																			password_tREST_2);
															kms_tREST_2 = kmf_tREST_2
																	.getKeyManagers();
														}

														ctx_tREST_2.init(
																kms_tREST_2,
																tms_tREST_2,
																null);
														config_tREST_2
																.getProperties()
																.put(com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
																		new com.sun.jersey.client.urlconnection.HTTPSProperties(
																				new javax.net.ssl.HostnameVerifier() {

																					public boolean verify(
																							String hostName,
																							javax.net.ssl.SSLSession session) {
																						return true;
																					}
																				},
																				ctx_tREST_2));

														com.sun.jersey.api.client.Client restClient_tREST_2 = com.sun.jersey.api.client.Client
																.create(config_tREST_2);
														com.sun.jersey.api.client.WebResource restResource_tREST_2;
														if (endpoint_tREST_2 != null
																&& !("").equals(endpoint_tREST_2)) {
															restResource_tREST_2 = restClient_tREST_2
																	.resource(endpoint_tREST_2);
														} else {
															throw new IllegalArgumentException(
																	"url can't be empty!");
														}

														com.sun.jersey.api.client.ClientResponse errorResponse_tREST_2 = null;
														String restResponse_tREST_2 = "";
														try {

															restResponse_tREST_2 = restResource_tREST_2

															.put(String.class,
																	row9.RDF);

														} catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
															errorResponse_tREST_2 = ue
																	.getResponse();
														}

														// for output

														row15 = new row15Struct();
														if (errorResponse_tREST_2 != null) {
															row15.ERROR_CODE = errorResponse_tREST_2
																	.getStatus();
														} else {
															row15.Body = restResponse_tREST_2;
														}

														/**
														 * [tREST_2 begin ] stop
														 */

														/**
														 * [tREST_2 main ] start
														 */

														currentComponent = "tREST_2";

														tos_count_tREST_2++;

														/**
														 * [tREST_2 main ] stop
														 */

														/**
														 * [tLogRow_6 main ]
														 * start
														 */

														currentComponent = "tLogRow_6";

														// /////////////////////

														strBuffer_tLogRow_6 = new StringBuilder();

														if (row15.Body != null) { //

															strBuffer_tLogRow_6
																	.append(String
																			.valueOf(row15.Body));

														} //

														strBuffer_tLogRow_6
																.append("|");

														if (row15.ERROR_CODE != null) { //

															strBuffer_tLogRow_6
																	.append(String
																			.valueOf(row15.ERROR_CODE));

														} //

														if (globalMap
																.get("tLogRow_CONSOLE") != null) {
															consoleOut_tLogRow_6 = (java.io.PrintStream) globalMap
																	.get("tLogRow_CONSOLE");
														} else {
															consoleOut_tLogRow_6 = new java.io.PrintStream(
																	new java.io.BufferedOutputStream(
																			System.out));
															globalMap
																	.put("tLogRow_CONSOLE",
																			consoleOut_tLogRow_6);
														}

														consoleOut_tLogRow_6
																.println(strBuffer_tLogRow_6
																		.toString());
														consoleOut_tLogRow_6
																.flush();
														nb_line_tLogRow_6++;
														// ////

														// ////

														// /////////////////////

														tos_count_tLogRow_6++;

														/**
														 * [tLogRow_6 main ]
														 * stop
														 */

														/**
														 * [tREST_2 end ] start
														 */

														currentComponent = "tREST_2";

														ok_Hash.put("tREST_2",
																true);
														end_Hash.put(
																"tREST_2",
																System.currentTimeMillis());

														/**
														 * [tREST_2 end ] stop
														 */

														/**
														 * [tLogRow_6 end ]
														 * start
														 */

														currentComponent = "tLogRow_6";

														// ////
														// ////
														globalMap
																.put("tLogRow_6_NB_LINE",
																		nb_line_tLogRow_6);

														// /////////////////////

														ok_Hash.put(
																"tLogRow_6",
																true);
														end_Hash.put(
																"tLogRow_6",
																System.currentTimeMillis());

														/**
														 * [tLogRow_6 end ] stop
														 */

													} // End of branch "row7"

													// end for
												}

											} // C_01

										} // End of branch "row10"

									} // End of branch "row5"

									// end for
								}

							} // C_01

						} // End of branch "row3"

						// end for
					}

				} // C_01

				/**
				 * [tREST_1 end ] start
				 */

				currentComponent = "tREST_1";

				ok_Hash.put("tREST_1", true);
				end_Hash.put("tREST_1", System.currentTimeMillis());

				/**
				 * [tREST_1 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tReplace_1 end ] start
				 */

				currentComponent = "tReplace_1";

				globalMap.put("tReplace_1_NB_LINE", nb_line_tReplace_1);

				ok_Hash.put("tReplace_1", true);
				end_Hash.put("tReplace_1", System.currentTimeMillis());

				/**
				 * [tReplace_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tExtractJSONFields_1 end ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				globalMap.put("tExtractJSONFields_1_NB_LINE",
						nb_line_tExtractJSONFields_1);

				ok_Hash.put("tExtractJSONFields_1", true);
				end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_1 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

				// ////
				// ////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

				// /////////////////////

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

				/**
				 * [tExtractJSONFields_2 end ] start
				 */

				currentComponent = "tExtractJSONFields_2";

				globalMap.put("tExtractJSONFields_1_NB_LINE",
						nb_line_tExtractJSONFields_2);

				ok_Hash.put("tExtractJSONFields_2", true);
				end_Hash.put("tExtractJSONFields_2", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_2 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK",
						nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_1);

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tExtractRegexFields_1 end ] start
				 */

				currentComponent = "tExtractRegexFields_1";

				ok_Hash.put("tExtractRegexFields_1", true);
				end_Hash.put("tExtractRegexFields_1",
						System.currentTimeMillis());

				/**
				 * [tExtractRegexFields_1 end ] stop
				 */

				/**
				 * [tLogRow_5 end ] start
				 */

				currentComponent = "tLogRow_5";

				ok_Hash.put("tLogRow_5", true);
				end_Hash.put("tLogRow_5", System.currentTimeMillis());

				/**
				 * [tLogRow_5 end ] stop
				 */

				/**
				 * [tNTriplesTemplate_1 end ] start
				 */

				currentComponent = "tNTriplesTemplate_1";

				globalMap.put("tNTriplesTemplate_1_NB_LINE",
						nb_line_tNTriplesTemplate_1);
				globalMap.put("tNTriplesTemplate_1_NB_LINE_OK",
						nb_line_ok_tNTriplesTemplate_1);

				ok_Hash.put("tNTriplesTemplate_1", true);
				end_Hash.put("tNTriplesTemplate_1", System.currentTimeMillis());

				/**
				 * [tNTriplesTemplate_1 end ] stop
				 */

				/**
				 * [tLogRow_4 end ] start
				 */

				currentComponent = "tLogRow_4";

				ok_Hash.put("tLogRow_4", true);
				end_Hash.put("tLogRow_4", System.currentTimeMillis());

				/**
				 * [tLogRow_4 end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE",
						nb_line_tFlowToIterate_1);

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tREST_1 finally ] start
				 */

				currentComponent = "tREST_1";

				/**
				 * [tREST_1 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tReplace_1 finally ] start
				 */

				currentComponent = "tReplace_1";

				/**
				 * [tReplace_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_1 finally ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				/**
				 * [tExtractJSONFields_1 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_2 finally ] start
				 */

				currentComponent = "tExtractJSONFields_2";

				/**
				 * [tExtractJSONFields_2 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tExtractRegexFields_1 finally ] start
				 */

				currentComponent = "tExtractRegexFields_1";

				/**
				 * [tExtractRegexFields_1 finally ] stop
				 */

				/**
				 * [tLogRow_5 finally ] start
				 */

				currentComponent = "tLogRow_5";

				/**
				 * [tLogRow_5 finally ] stop
				 */

				/**
				 * [tNTriplesTemplate_1 finally ] start
				 */

				currentComponent = "tNTriplesTemplate_1";

				/**
				 * [tNTriplesTemplate_1 finally ] stop
				 */

				/**
				 * [tLogRow_4 finally ] start
				 */

				currentComponent = "tLogRow_4";

				/**
				 * [tLogRow_4 finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tREST_2 finally ] start
				 */

				currentComponent = "tREST_2";

				/**
				 * [tREST_2 finally ] stop
				 */

				/**
				 * [tLogRow_6 finally ] start
				 */

				currentComponent = "tLogRow_6";

				/**
				 * [tLogRow_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tREST_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ES_MAPPING_BIO2RDF ES_MAPPING_BIO2RDFClass = new ES_MAPPING_BIO2RDF();

		int exitCode = ES_MAPPING_BIO2RDFClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = ES_MAPPING_BIO2RDF.class
					.getClassLoader().getResourceAsStream(
							"bio2rdf/es_mapping_bio2rdf_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.index = (String) context.getProperty("index");
			context.type = (String) context.getProperty("type");
			context.hostES = (String) context.getProperty("hostES");
			context.hostES1 = (String) context.getProperty("hostES1");
			context.hostES2 = (String) context.getProperty("hostES2");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("index")) {
				context.index = (String) parentContextMap.get("index");
			}
			if (parentContextMap.containsKey("type")) {
				context.type = (String) parentContextMap.get("type");
			}
			if (parentContextMap.containsKey("hostES")) {
				context.hostES = (String) parentContextMap.get("hostES");
			}
			if (parentContextMap.containsKey("hostES1")) {
				context.hostES1 = (String) parentContextMap.get("hostES1");
			}
			if (parentContextMap.containsKey("hostES2")) {
				context.hostES2 = (String) parentContextMap.get("hostES2");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tREST_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tREST_1) {
			globalMap.put("tREST_1_SUBPROCESS_STATE", -1);

			e_tREST_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : ES_MAPPING_BIO2RDF");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 147184 characters generated by Talend Open Studio for Data Integration on the
 * July 14, 2016 7:59:03 EDT AM
 ************************************************************************************************/
